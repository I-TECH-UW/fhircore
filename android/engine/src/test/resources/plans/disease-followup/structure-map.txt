map "http://hl7.org/fhir/StructureMap/be876ffc-491d-4ab1-ba2c-0ba5213283c8" = 'Measles Administer Vaccine workflow'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group childImmunizationSchedule(source src : Parameters, target careplan: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
        evaluate(src, $this.parameter.where(name='definition').resource) as definition,
        evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
        evaluate(src, $this.parameter.where(name='period').value) as period,
        evaluate(src, $this.parameter.where(name='version').value) as version
        then defineMedicationRequestToExtract(period, version, subject, definition, questionnaireResponse, careplan) "r_careplan";
}

group defineMedicationRequestToExtract(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    questionnaireResponse.item as questionnaireResponseItem where(linkId = 'ae9c1118-4572-4f9b-8c88-ec9429aa4ec0' and answer.exists()) then {
        questionnaireResponseItem where(linkId = '5d887ed0-0c4f-4be6-8f96-63c75346ad42' and answer.exists()) then {

            questionnaireResponseItem where(linkId = 'ae9c1118-4572-4f9b-8c88-ec9429aa4ec0' and answer.where(value.code = 'Yes').exists()) then {
                questionnaireResponseItem where(linkId = '5d887ed0-0c4f-4be6-8f96-63c75346ad42' and answer.where(value.code = 'Yes').exists()) then {
                    subject then extractMedicationRequestUpdateQuestionnaire(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_consent_stock";
                } "questionnaire_response_item_contraindication";

                questionnaireResponseItem where(linkId = '5d887ed0-0c4f-4be6-8f96-63c75346ad42' and answer.where(value.code = 'No').exists()) then {
                    subject then extractMedicationRequestPlanOnHold(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_stock";
                } "questionnaire_response_item_contraindication";
            } "questionnaire_response_item_contraindication";

            questionnaireResponseItem where(linkId = 'ae9c1118-4572-4f9b-8c88-ec9429aa4ec0' and answer.where(value.code = 'No').exists()) then {
                subject then extractMedicationRequestOrderCancelled(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_consent";
            } "questionnaire_response_item_contraindication";
        } "questionnaire_response_item_answer_two_available";
    } "questionnaire_response_item_answer_available";
}

group extractMedicationRequestUpdateQuestionnaire(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

        subject -> create('MedicationRequest') as medicationRequestOrder then {
        subject -> medicationRequestOrder.id =  create('id') as id then {
                subject -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_medication_request_value";
            } "rule_update_medication_request_value_id";
        subject -> medicationRequestOrder.supportingInformation = create('Reference') as questionnaireReference, questionnaireReference.reference = 'Questionnaire/caebc6b4-7861-42be-8925-12c4a6bad921' "r_task_reason_reference";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";

        // add MR to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'MedicationRequest')) as activity, activity.outcomeReference = reference(medicationRequestOrder) "rule_careplan_task_reference";
            subject -> careplan.contained = medicationRequestOrder "rule_add_task";
        } "rule_careplan_task";
    } "r_medication_request";
}

group extractMedicationRequestOrderCancelled (
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    subject -> create('MedicationRequest') as medicationRequestOrder then {
        subject -> medicationRequestOrder.id =  create('id') as id then {
                subject -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_medication_request_value";
            } "rule_update_medication_request_value_id";
        subject -> medicationRequestOrder.basedOn = reference(careplan) "rule_update_flag_basedOn";
        subject -> medicationRequestOrder.status = 'cancelled' "r_medication_request_status";
        subject -> medicationRequestOrder.intent = 'order' "r_medication_request_intent";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";

        // add MR to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'MedicationRequest')) as activity, activity.outcomeReference = reference(medicationRequestOrder) "rule_careplan_task_reference";
            subject -> careplan.contained = medicationRequestOrder "rule_add_task";
        } "rule_careplan_task";
    } "r_medication_request";
}

group extractMedicationRequestPlanOnHold(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    //or answer.where(value.code = 'DE166') or answer.where(value.code = 'DE167')
    subject -> create('MedicationRequest') as medicationRequestCancelledOrHold then {
        subject -> medicationRequestCancelledOrHold.id =  create('id') as id then {
            subject -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_medication_request_value";
        } "rule_update_medication_request_value_id";
        subject -> medicationRequestCancelledOrHold.basedOn = reference(careplan) "rule_update_flag_basedOn";
        subject -> medicationRequestCancelledOrHold.status = 'on-hold' "r_medication_request_status";
        subject -> medicationRequestCancelledOrHold.intent = 'plan' "r_medication_request_intent";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";

        // add MR to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'MedicationRequest')) as activity, activity.outcomeReference = reference(medicationRequestCancelledOrHold) "rule_careplan_task_reference";
            subject -> careplan.contained = medicationRequestCancelledOrHold "rule_add_task";
        } "rule_careplan_task";
    } "r_medication_request";
}
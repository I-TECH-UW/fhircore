map "https://fhir.labs.smartregister.org/fhir/StructureMap/63752b18-9f0e-48a7-9a21-d3714be6309a" = "eCBIS Disease Followup"
uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target
group eCBISNewPregnancyRegistrationAndVisit(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(definition, $this.timing) as timing,
            evaluate(timing, $this.repeat) as repeat,
            evaluate(subject, today()) as dueDate, evaluate(subject, today() + ((repeat.duration.toString().toInteger()).toString() + ' \'months\'').toQuantity()) as maxDate,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse
            then ExtractTasks(dueDate, maxDate, repeat, subject, timing) "r_careplan";
}
group ExtractTasks(
    source dueDate: DateType,
    source maxDate: DateType,
    source repeat: TimingRepeat,
    source subject : Patient,
    target timing: Timing){
    // today + total * gap

    subject ->  create('Period') as period,
                create('Task') as task then {
        subject then ExtractPeriod(dueDate, maxDate, period) "r_task_period_extr";
        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'Disease Follow Up Task',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "r_task_data";
         subject -> task.groupIdentifier = create('Identifier') as groupIdentifier then {
                      subject -> groupIdentifier.value = "anc_follow_visit" "rule_group_identifier_value";
                      subject -> groupIdentifier.use = "secondary" "rule_group_identifier_use";
               } "rule_group_identifier";
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/e14b5743-0a06-4ab5-aaee-ac158d4cb64f' "r_task_reason_ref";
        subject -> activity.outcomeReference = reference(task) "r_cp_task_ref";
        subject -> timing.event = evaluate(period, $this.start) "r_activity_timing";
        repeat -> evaluate(period, $this.start + (repeat.period.toString() + ' \'months\'').toQuantity()) as nextDueDate
                          then ExtractTasks(nextDueDate, maxDate, repeat, subject, timing) "r_task_repeat";
    } "r_cp_acti_outcome";
}
group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";
    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}
group ExtractDiseaseCode(source src: QuestionnaireResponse, target det: ActivityDetail) {
    src.item as dis_item where(src.descendants().where(linkId='f8fdb1c1-fff2-49f9-8f93-8a4c1f55c9ce')) then {
        dis_item.answer as hiv where(value.code='hiv') -> evaluate(hiv, value) as hivcode then ExtractCodeableConcept(src, hivcode, det) "r_det_c";
        dis_item.answer as tb where(value.code='tb') -> evaluate(tb, value) as tbcode then ExtractCodeableConcept(src, tbcode, det) "r_det_c";
        dis_item.answer as me where(value.code='mental-health') -> evaluate(me, value) as mecode then ExtractCodeableConcept(src, mecode, det) "r_det_c";

        dis_item.answer as ntd where(value.code='cm-ntd') -> evaluate(ntd, value) as dp then {
            ntd.item as nvc where(src.descendants().where(linkId='605bd5c8-f279-4903-876f-5e7920d80c32')) then {
                nvc.answer as bu where(value.code='buruli-ulcer') -> evaluate(bu, value) as bucode, evaluate(src, "CM-NTD Buruli Ulcer") as displayText then ExtractCoding(src, bucode, displayText, det) "r_det_c";
                nvc.answer as lep where(value.code='leprosy') -> evaluate(lep, value) as lepcode, evaluate(src, "CM-NTD Leprosy") as displayText then ExtractCoding(src, lepcode, displayText, det) "r_det_c";
                nvc.answer as lf where(value.code='lymphatic-filariasis') -> evaluate(lf, value) as lfcode, evaluate(src, "CM-NTD Lymphatic Filariasis") as displayText then ExtractCoding(src, lfcode, displayText, det) "r_det_c";
            } "r_det_n_cc";
        } "r_det_cc";
    } "r_det_c";
}
group ExtractCodeableConcept(source src: QuestionnaireResponse, source icoding: Coding, target det: ActivityDetail) {
    src -> det.code = create("CodeableConcept") as ccDisease then {
        src -> ccDisease.coding = icoding "r_det_code_coding";
        src -> ccDisease.text = evaluate(icoding, $this.display) "r_det_code_text";
    } "r_det_cc";
}
group ExtractCoding(source src: QuestionnaireResponse, source code: String, source displayText: String, target det: ActivityDetail) {
    src -> det.code = create("CodeableConcept") as ccDisease then {
        src -> ccDisease.coding = c("http://snomed.info/sct", code, displayText) as coding, coding.display = displayText "r_det_code_coding";
        src -> ccDisease.text = displayText "r_det_code_text";
    } "r_det_cc";
}
map "http://hl7.org/fhir/StructureMap/caf1b05a-4027-4288-8f06-f109d7f22320" = "eCHIS Child Routine CarePlan"

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/careplan" as target

group eCHISChildRoutineCarePlan(source src : Parameters, target tgt: careplan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
            evaluate(src, $this.parameter.where(name='period').value) as period
            then extractTask(period, subject, questionnaireResponse, tgt) "r_careplan";
}

group extractTask(
    source period: Period,
    source subject: Patient,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan){

    // fill task into careplan contained and add reference in activity.outcome
    subject -> create('Task') as task then {

        // if QR questionnaireID is Add Member Questionnaire
            subject where(questionnaireResponse.questionnaire.value = 'Questionnaire/7bf0bab5-cb90-4a42-ac9c-c26b6b588605') then {
                // start of task is today and end is last day of given month
                    subject -> evaluate(subject, today()) as dueDate then {
                        subject -> create('date') as startOfMonth, startOfMonth.value = evaluate(dueDate, $this.value.substring(0,7) + '-01'),
                                create('date') as start, start.value = evaluate(dueDate, iif($this = today(), $this, startOfMonth).value ),
                                evaluate(startOfMonth, ($this + '1 \'months\''.toQuantity()) - '1 \'days\''.toQuantity()) as end,
                                create('Period') as periodNew then {
                            subject then ExtractPeriodNew(start, end, periodNew) "r_task_period_extr";
                            subject -> task.executionPeriod = periodNew "r_task_set_period";
                            subject -> task.status = 'ready' "r_task_status";
                        } "r_task_period_new";
                    } "r_task_start_due";
            } "r_qr_fr_data";

             // if QR questionnaireID is Child Routine Visit Questionnaire
            subject where(questionnaireResponse.questionnaire.value = 'Questionnaire/d9b37683-c306-45f8-b394-c7b8ac9c7cba') then {
                // modify period.start to be on the first date of next month till end of next month
                subject -> evaluate(subject, today()) as dueDate then {
                    subject -> create('date') as startOfMonth, startOfMonth.value = evaluate(dueDate, $this.value.substring(0,7) + '-01'),
                            evaluate(startOfMonth, ($this + '1 \'months\''.toQuantity())) as startOfNextMonth,
                            evaluate(startOfNextMonth, ($this + '1 \'months\''.toQuantity()) - '1 \'days\''.toQuantity()) as endOfNextMonth,
                            create('Period') as periodNew then {
                        subject then ExtractPeriodNew(startOfNextMonth, endOfNextMonth, periodNew) "r_task_period_extr";
                        subject -> task.executionPeriod = periodNew "r_task_set_period";
                        subject -> task.status = 'requested' "r_task_status";
                    } "r_task_hv_period_new";
                } "r_task_hv_start_due";
            } "r_qr_hv_data";

        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.identifier = create('Identifier') as iden, iden.value = 'child_routine_visit', iden.use = 'secondary',
               task.intent = 'plan',
               task.priority = 'routine',
               task.description = 'Child Routine Visit',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*','')),
               //task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.focus = create('Reference') as ref, ref.reference = 'PlanDefinition/834641db-e26c-48bf-aa91-6256dcd8ee4d',
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "rule_task_data";

        subject where(careplan.id.exists()) -> task.basedOn = create('Reference') as ref,
            ref.reference = evaluate(careplan, $this.id.replaceMatches('/_history/.*', '')) "r_task_based_on";
        subject where(careplan.id.exists().not()) -> task.basedOn = reference(careplan) "r_task_based_on";

        // child routine visit form
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/d9b37683-c306-45f8-b394-c7b8ac9c7cba' "r_task_reason_ref";

        subject where(offset <= (subject.birthDate + 60 'month')) -> task.reasonReference = create('Reference') as ref,
        ref.reference = 'Questionnaire/d9b37683-c306-45f8-b394-c7b8ac9c7cba' "r_task_reason_ref_under5";

        subject -> task.groupIdentifier = create('Identifier') as groupIdentifier then {
                subject -> groupIdentifier.value = "child_routine_visit" "rule_group_identifier_value";
                subject -> groupIdentifier.use = "secondary" "rule_group_identifier_use";
        } "rule_group_identifier";

        // Add the valueReference
        subject -> task.input = create('Task_Input') as input then {
            subject -> input.value = create('Reference') as valueRef, valueRef.reference = 'PlanDefinition/834641db-e26c-48bf-aa91-6256dcd8ee4d' "r_task_input_value_ref";
            subject -> input.type = create('CodeableConcept') as taskCode then extractTaskCode(subject, taskCode) "r_task_input_cod";
        } "r_task_input";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'Task').exists().not())
                -> careplan.activity = create('CarePlan_Activity') as activity then {
                   subject -> activity.detail = create('CarePlan_ActivityDetail') as det then {
                       subject -> det.kind = 'Task' "r_act_det_data";
                   } "r_act_det";
               } "r_cp_acti";

        // add task to careplan only if its valid and not expired
        subject where(task.executionPeriod.start >= today() or task.executionPeriod.end >= today()) then {
                 subject -> evaluate(careplan, activity.where(detail.kind = 'Task')) as activity,
                            activity.outcomeReference = reference(task) "r_cp_task_ref";
                 subject -> careplan.contained = task  "r_add_task";
        } "r_cp_task";
    } "rule_careplan_task_outcome";
}

group extractTaskCode(source subject: Patient, target taskCode: CodeableConcept){
      subject -> taskCode.coding = c("http://smartregister.org/", "plan_definition") as coding, coding.display = 'Plan Definition Reference' "r_cp_cod_disp";
      subject -> taskCode.text = 'Plan Definition Reference' "r_cp_cc_txt";
}

group ExtractPeriodNew(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";
    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}
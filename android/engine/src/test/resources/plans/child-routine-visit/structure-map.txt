map "http://hl7.org/fhir/StructureMap/8545bfca-fa7e-4a64-a69c-af6827a2eaa3" = "HIV Pre-Screening Task"
uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target


group HIVPreScreening(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = "collection" "r_bundle_type";
    src.item as hivStatus where(linkId = 'e74c1a4a-6d3e-47ab-803f-5fb13c9e99dc' and answer.value.exists() and (answer.value.code = 'positive')) then {
        src -> evaluate(src, $this.subject) as refPatient then ExtractCreateHIVCondition(src, bundle, refPatient) "r_bundle_entries";
    } "rule_hiv_status_check";
    src -> evaluate(src, $this.subject) as refPatient then ExtractEncounter(src, bundle) "r_obs_entry";
}

group ExtractCreateHIVCondition(source src : QuestionnaireResponse, target bundle : Bundle, source refPatient : Reference) {
    src -> bundle.entry as entry, entry.resource = create("Condition") as cnd then {
    	src -> cnd.id = uuid() "r_cnd_id";
		src -> cnd.onset = evaluate(src, now()) "r_cnd_onset_date_val";
    	src -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") "r_cnd_clinical_st";
    	src -> cnd.verificationStatus = cc("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") "r_cnd_verif_st";
    	src -> cnd.category = cc("http://terminology.hl7.org/CodeSystem/condition-category", "problem-list-item", "Problem List Item") "r_cnd_category";
    	src -> cnd.subject = refPatient "r_cnd_sub";
    	src -> cnd.recordedDate = evaluate(src, now()) "r_cnd_recorded";

    	src -> cnd.code = create("CodeableConcept") as ccHiv then {
            src -> ccHiv.coding = c("http://snomed.info/sct", "165816005", "Human immunodeficiency virus positive") "r_cnd_code_coding";
            src -> ccHiv.text = "HIV Condition" "r_cnd_code_text";
        } "r_cnd_code";
    } "r_cnd";
}

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle){
    src ->bundle.entry as entry,
        entry.resource = create("Encounter") as encounter then {
            src->encounter.id = uuid(),
                encounter.status = "finished",
                encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH","home health"),
                encounter.serviceType= cc("http://terminology.hl7.org/CodeSystem/service-type", "497","Home Visits- HIV Pre Screening") "r_enc_data";
            src ->encounter.subject = create("Reference") as ref then {
                src ->ref.reference = evaluate(src, "Patient/"+ $this.item.where(linkId="patient-id").answer.value) "r_enc_subject_ref";
            }  "r_enc_subject";
            src then ExtractObservations(src, bundle, encounter) "r_extract_obs";

        } "r_encounter";
}

group ExtractObservations(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src then
    ExtractChildTestedForHiv(src, bundle, encounter),
    ExtractTestResultsKnown(src, bundle, encounter),
    ExtractNewExposure(src, bundle, encounter),
    ExtractConductHIVScreening(src, bundle, encounter),
    ExtractChildEnrolledToART(src, bundle, encounter),
    ExtractAdherenceCounsellingOffered(src, bundle, encounter),
    ExtractChildReferredToHealthFacility(src, bundle, encounter)
    "r_enc_obs";
}

group ExtractChildTestedForHiv(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="8265f18e-4f2c-4322-b0c8-7b9afe84baa2") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "365866002","Finding of HIV status"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}

group ExtractTestResultsKnown(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="e74c1a4a-6d3e-47ab-803f-5fb13c9e99dc") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "278977008","Human immunodeficiency virus status"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}

group ExtractNewExposure(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="d2b2fd19-3273-4f2a-8169-145f9ecddd49") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "365866002","Finding of human immunodeficiency virus"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}


group ExtractConductHIVScreening(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="d0a8b78d-baf9-4304-9f21-18b514fe8ade") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "171121004","Current chronological age"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}

group ExtractChildEnrolledToART(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="c7db2997-d3c7-45d7-85af-a358ef1455f1") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "713540004","ART"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}

group ExtractAdherenceCounsellingOffered(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="58ae3d52-290f-4f83-8d27-11f11b40eced") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "313077009 ","Human immunodeficiency virus counseling"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}

group ExtractChildReferredToHealthFacility(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter){
    src.item first as item where(linkId="76bb2dba-3fae-472f-b210-1f6a668cf8e4") and answer.count()>0 then{
        src->bundle.entry as entry,
        entry.resource = create("Observation") as obs then {
            src->obs.id = uuid(),
                obs.code = cc("http://www.snomed.org/", "3457005","Patient referral"),
                obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history"),
                obs.encounter = reference(encounter),
                obs.effective = evaluate(src, now()) "r_obs_data_date_ws";
            src->obs.subject = create("Reference") as ref then {
                src->ref.reference = evaluate(src, "Patient/" + $this.item.where(linkId = "patient-id").answer.value) "r_obs_sub_ref_date_ws";
            }
            "r_obs_sub_date_ws";
            src->obs.value = evaluate(item, $this.answer.value.code) "r_obs_value_date_ws";
        }
        "r_obs_date_ws";
    }
    "r_obs_item_date_ws";
}
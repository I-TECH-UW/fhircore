map "https://fhir.labs.smartregister.org/fhir/StructureMap/132156" = "eCBIS Family Palnning Routine Visit"

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group eCBISFPRoutineVisit(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
        evaluate(src, $this.parameter.where(name='definition').resource) as definition,
        evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse
        then ExtractCarePlan(subject, definition, questionnaireResponse, tgt), ExtractActivityDetail(subject, definition, questionnaireResponse, tgt) "rule_careplan_generation";
}

group ExtractCarePlan(source subject: Patient, source definition: ActivityDefinition, source questionnaireResponse: QuestionnaireResponse, target careplan : CarePlan) {
    subject -> careplan.id = uuid() ,
           careplan.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
           careplan.status = 'active',
           careplan.intent = 'plan',
           careplan.subject = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
           careplan.created = evaluate(subject, now()),
           careplan.author = evaluate(subject, $this.generalPractitioner.first()), evaluate(subject, now()) as offset, create('Period') as period then ExtractPncPeriod(offset, period) "rule_careplan_period_data";
}

group ExtractActivityDetail(source subject : Patient, source definition: ActivityDefinition, source questionnaireResponse: QuestionnaireResponse, target careplan : CarePlan){
    subject -> careplan.activity = create('CarePlan_Activity') as activity then {
        subject -> activity.detail = create('CarePlan_ActivityDetail') as det then {
            subject -> det.kind = 'Task', det.status = 'in-progress', det.description = evaluate(definition, $this.title), det.performer = evaluate(subject, $this.generalPractitioner.first()), det.code = create('CodeableConcept') as concept then ExtractTimingCode(subject, concept) "r_act_det_data";

            subject -> det.scheduled = evaluate(definition, $this.timing) as timing, evaluate(timing, $this.repeat) as repeat then {

            subject -> evaluate(subject, today()) as monthOneDueDate, evaluate(monthOneDueDate , $this + '1 \'months\''.toQuantity()) as monthOneEnd then ExtractTasks(monthOneDueDate, monthOneEnd, subject, careplan, activity, timing) "rule_month_one_tasks";
            subject -> evaluate(subject, today() + '3 \'months\''.toQuantity()) as monthThreeDueDate, evaluate(monthThreeDueDate , $this + '1 \'months\''.toQuantity()) as monthThreeEnd then ExtractTasks(monthThreeDueDate, monthThreeEnd, subject, careplan, activity, timing) "rule_month_three_tasks";
            subject -> evaluate(subject, today() + '6 \'months\''.toQuantity()) as monthSixDueDate, evaluate(monthSixDueDate , $this + '1 \'months\''.toQuantity()) as monthSixEnd then ExtractTasks(monthSixDueDate, monthSixEnd, subject, careplan, activity, timing) "rule_month_six_tasks";
            subject -> evaluate(subject, today() + '9 \'months\''.toQuantity()) as monthNineDueDate, evaluate(monthNineDueDate , $this + '1 \'months\''.toQuantity()) as monthNineEnd then ExtractTasks(monthNineDueDate, monthNineEnd, subject, careplan, activity, timing) "rule_month_nine_tasks";
            subject -> evaluate(subject, today() + '12 \'months\''.toQuantity()) as monthTwelveDueDate, evaluate(monthTwelveDueDate , $this + '1 \'months\''.toQuantity()) as monthTwelveEnd then ExtractTasks(monthTwelveDueDate, monthTwelveEnd, subject, careplan, activity, timing) "rule_month_twelve_tasks";

            subject -> repeat.count = create('positiveInt') as c, c.value = evaluate(activity, $this.outcomeReference.count().value) "r_task_rep_count";

            } "r_tim_repeat";
        } "r_act_det";

    } "r_cp_acti";
}

group ExtractTasks(
    source dueDate: DateType,
    source maxDate: DateType,
    source subject : Patient,
    target careplan: CarePlan,
    target activity : CarePlan_Activity,
    target timing: Timing){

    subject -> create('Period') as period, careplan.contained = create('Task') as task then {

        subject then ExtractPeriod(dueDate, maxDate, period) "r_task_period_extr";

        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'FP Follow Up visit',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "rule_task_data";

        // fp followup form
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/450cb100-0c5b-47c6-9f33-2830a79be726' "r_task_reason_ref";

        subject -> activity.outcomeReference = reference(task) "r_cp_task_ref";
        subject -> timing.event = evaluate(period, $this.start) "r_activity_timing";

    } "rule_careplan_task_outcome";
}

group ExtractTimingCode(source subject : Patient, target concept: CodeableConcept){
     subject -> concept.coding = c("http://terminology.hl7.org/CodeSystem/v3-GTSAbbreviation", "MO") as coding then {
        subject -> coding.display = 'MO' "r_cp_cod_disp";
    } "r_cp_cc_cod";
    subject -> concept.text = 'MO' "r_cp_cc_txt";
}

group ExtractPncPeriod(source offset: DateType, target period: Period){
    offset -> offset as start,
              evaluate(offset, $this + '12 \'months\''.toQuantity()) as end then
              ExtractPeriod(start, end, period) "r_period";
}

group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}

group ExtractSubject(source subject: Patient, target ref: Reference) {
    subject -> ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')) "r_patient_ref";
    subject -> ref.display = evaluate(subject, $this.name.given + " " + $this.name.text + " " + $this.name.family) "r_patient_display";
}

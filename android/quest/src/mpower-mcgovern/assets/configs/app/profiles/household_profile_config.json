{
  "appId": "app",
  "configType": "profile",
  "id": "householdProfile",
  "fhirResource": {
    "baseResource": {
      "resource": "Group",
      "dataQueries": [
        {
          "paramName": "type",
          "filterCriteria": [
            {
              "dataType": "CODING",
              "value": {
                "system": "http://hl7.org/fhir/group-type",
                "code": "person"
              }
            }
          ]
        },
        {
          "paramName": "code",
          "filterCriteria": [
            {
              "dataType": "CODEABLECONCEPT",
              "value": {
                "system": "https://www.snomed.org",
                "code": "35359004"
              }
            }
          ]
        }
      ]
    },
    "relatedResources": [
      {
        "resource": "Patient",
        "isRevInclude": false,
        "searchParameter": "member",
        "relatedResources": [
          {
            "resource": "Condition",
            "searchParameter": "subject"
          },
          {
            "resource": "CarePlan",
            "searchParameter": "subject"
          },
          {
            "resource": "Task",
            "searchParameter": "subject",
            "sortConfigs": [
              {
                "paramName": "period",
                "dataType": "DATE",
                "order": "DESCENDING"
              }
            ]
          },
          {
            "resource": "Observation",
            "searchParameter": "subject"
          },
          {
            "resource": "RelatedPerson",
            "searchParameter": "patient"
          }
        ],
        "sortConfigs": [
          {
            "paramName": "_lastUpdated",
            "dataType": "DATE",
            "order": "DESCENDING"
          }
        ]
      },
      {
        "id": "groupEncounter",
        "resource": "Encounter",
        "searchParameter": "subject"
      },
      {
        "id": "groupObservation",
        "resource": "Observation",
        "searchParameter": "subject"
      }
    ]
  },
  "fabActions": [
    {
      "id": "ActionButton",
      "visible": true,
      "animate": false,
      "display": "{{ add.member }}",
      "menuIconConfig": {
        "type": "local",
        "reference": "ic_profile"
      },
      "actions": [
        {
          "trigger": "ON_CLICK",
          "workflow": "LAUNCH_QUESTIONNAIRE",
          "questionnaire": {
            "id": "4234",
            "title": "Add household member",
            "saveButtonText": "Add Member",
            "resourceType": "Patient",
            "groupResource": {
              "groupIdentifier": "@{familyLogicalId}",
              "memberResourceType": "Patient"
            },
            "planDefinitions": [
              "4242"
            ],
            "snackBarMessage": {
              "message": "Household member has been added",
              "actionLabel": "",
              "duration": "Short"
            }
          },
          "params": [
            {
              "paramType": "PREPOPULATE",
              "linkId": "ed77104e-c279-4030-ab20-8cd99ca99ca9",
              "dataType": "INTEGER",
              "key": "opensrpId",
              "value": "@{humanReadableId}"
            },
            {
              "paramType": "PREPOPULATE",
              "linkId": "toggle-is-family-head",
              "dataType": "INTEGER",
              "key": "isFamilyHeadExists",
              "value": "@{isFamilyHeadExists}"
            },
            {
              "paramType": "PREPOPULATE",
              "linkId": "2588ee71-9699-440d-8364-6ac7c1e63ccd",
              "dataType": "STRING",
              "key": "familyMemberId",
              "value": "@{familyMemberId}"
            }
          ]
        }
      ]
    }
  ],
  "rules": [
    {
      "name": "encounterCount",
      "condition": "true",
      "actions": [
        "data.put('encounterCount', size(groupEncounter))"
      ]
    },
    {
      "name": "observationCount",
      "condition": "true",
      "actions": [
        "data.put('observationCount', size(groupObservation))"
      ]
    },
    {
      "name": "familyName",
      "condition": "true",
      "actions": [
        "data.put('familyName', fhirPath.extractValue(Group, 'Group.name'))"
      ]
    },
    {
      "name": "familyId",
      "condition": "true",
      "actions": [
        "data.put('familyId', fhirPath.extractValue(Group, 'Group.identifier[0].value'))"
      ]
    },
    {
      "name": "familyLogicalId",
      "condition": "true",
      "actions": [
        "data.put('familyLogicalId', fhirPath.extractValue(Group, 'Group.id'))"
      ]
    },
    {
      "name": "familyLogicalIdOnly",
      "condition": "true",
      "actions": [
        "data.put('familyLogicalIdOnly', fhirPath.extractValue(Group, 'Group.id').split(\"/\").get(1))"
      ]
    },
    {
      "name": "familyVillage",
      "condition": "true",
      "actions": [
        "data.put('familyVillage', fhirPath.extractValue(Group, 'Group.characteristic[0].code.text'))"
      ]
    },
    {
      "name": "humanReadableId",
      "condition": "true",
      "actions": [
        "data.put('humanReadableId', service.generateRandomSixDigitInt())"
      ]
    },
    {
      "name": "familyHeadId",
      "condition": "true",
      "actions": [
        "data.put('familyHeadId', service.filterResources(RelatedPerson, 'RelatedPerson.relationship.coding.code=\"99990006\"').get(0).patient.reference)"
      ]
    },
    {
      "name": "isFamilyHeadExists",
      "condition": "true",
      "actions": [
        "data.put('isFamilyHeadExists', empty(data.get('familyHeadId'))? 0 : 1)"
      ]
    },
    {
      "name": "familyMemberCount",
      "condition": "true",
      "actions": [
        "data.put('familyMemberCount', size(Patient))"
      ]
    },
    {
      "name": "familyMemberId",
      "condition": "true",
      "actions": [
        "data.put('familyMemberId', (data.get('familyId').toString() + ((data.get('familyMemberCount') + 1) > 9 ? (data.get('familyMemberCount') + 1).toString() : ('0' + (data.get('familyMemberCount') + 1).toString()))))"
      ]
    },
    {
      "name": "isFamilyVisitAvailable",
      "condition": "true",
      "actions": [
        "data.put('isFamilyVisitAvailable', fhirPath.extractValue(service.filterResources(groupEncounter, \"Encounter.reasonCode[0].coding[0].code = 'family_registration'\").get(0), \"Encounter.period.start < today() - 365 'days'\"))"
      ]
    }
  ],
  "topAppBar": {
    "title": {
      "viewType": "COMPOUND_TEXT",
      "primaryText": "@{familyName} Family Profile",
      "primaryTextColor": "#FFFFFF",
      "fontSize": 16.0,
      "maxLines": 1,
      "primaryTextFontWeight": "BOLD"
    },
    "content": [
      {
        "viewType": "ROW",
        "alignment": "START",
        "children": [
          {
            "viewType": "IMAGE_VIEW",
            "width": 80,
            "height": 80,
            "reference": "ic_households"
          },
          {
            "viewType": "SPACER",
            "width": 10
          },
          {
            "viewType": "COLUMN",
            "backgroundColor": "primaryColor",
            "children": [
              {
                "viewType": "ROW",
                "children": [
                  {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "Name: ",
                    "primaryTextColor": "#FFFFFF",
                    "primaryTextFontWeight": "BOLD"
                  },
                  {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "@{familyName} Family",
                    "primaryTextColor": "#FFFFFF"
                  }
                ]
              },
              {
                "viewType": "ROW",
                "children": [
                  {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "HH No: ",
                    "primaryTextColor": "#FFFFFF",
                    "primaryTextFontWeight": "BOLD"
                  },
                  {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "@{familyId}",
                    "primaryTextColor": "#FFFFFF"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "tabBar": {
    "viewType": "TABS",
    "contentScrollable": "true",
    "contentPadding": 0,
    "tabs": [
      "সদস্য",
      "বাকি",
      "পূর্বের তথ্য"
    ],
    "tabIndicatorColor": "#FFFF00",
    "tabContents": [
      {
        "id": "hhMembers",
        "viewType": "COLUMN",
        "backgroundColor": "#FFFFFF",
        "children": [
          {
            "id": "householdMemberList",
            "viewType": "LIST",
            "padding": 16,
            "resources": [
              {
                "resourceType": "Patient",
                "relatedResources": [
                  {
                    "resourceType": "CarePlan",
                    "fhirPathExpression": "CarePlan.subject.reference"
                  },
                  {
                    "resourceType": "Condition",
                    "fhirPathExpression": "Condition.subject.reference"
                  },
                  {
                    "resourceType": "Task",
                    "fhirPathExpression": "Task.for.reference"
                  },
                  {
                    "resourceType": "Observation",
                    "fhirPathExpression": "Observation.subject.reference"
                  },
                  {
                    "resourceType": "RelatedPerson",
                    "fhirPathExpression": "RelatedPerson.patient.reference"
                  }
                ]
              }
            ],
            "registerCard": {
              "rules": [
                {
                  "name": "patientName",
                  "condition": "true",
                  "actions": [
                    "data.put('patientName', fhirPath.extractValue(Patient, \"Patient.name[0].select(text)\"))"
                  ]
                },
                {
                  "name": "patientAge",
                  "condition": "true",
                  "actions": [
                    "data.put('patientAge', service.extractAge(Patient))"
                  ]
                },
                {
                  "name": "patientActive",
                  "condition": "true",
                  "actions": [
                    "data.put('patientActive', fhirPath.extractValue(Patient, 'Patient.active'))"
                  ]
                },
                {
                  "name": "patientTextColor",
                  "condition": "true",
                  "actions": [
                    "data.put('patientTextColor', Patient.active ? '#000000' : 'DefaultColor')"
                  ]
                },
                {
                  "name": "patientGender",
                  "condition": "true",
                  "actions": [
                    "data.put('patientGender', service.extractGender(Patient))"
                  ]
                },
                {
                  "name": "patientLogicalId",
                  "condition": "true",
                  "actions": [
                    "data.put('patientLogicalId', fhirPath.extractValue(Patient, 'Patient.id'))"
                  ]
                },
                {
                  "name": "serviceStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('serviceStatus',  service.evaluateToBoolean(Task, \"Task.status = 'ready' \", false) ? 'DUE' : 'UPCOMING')"
                  ]
                },
                {
                  "name": "taskDescription",
                  "condition": "true",
                  "actions": [
                    "data.put('taskDescription', fhirPath.extractValue(size(Task) > 0 ? Task.get(0) : null, 'Task.description'))"
                  ]
                },
                {
                  "name": "taskId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskId', fhirPath.extractValue(size(Task) > 0 ? Task.get(0) : null, 'Task.id'))"
                  ]
                },
                {
                  "name": "taskExecutionStartDate",
                  "condition": "true",
                  "actions": [
                    "data.put('taskExecutionStartDate', fhirPath.extractValue(size(Task) > 0 ? Task.get(0) : null, 'Task.executionPeriod.start'))"
                  ]
                },
                {
                  "name": "taskScheduleDate",
                  "condition": "true",
                  "actions": [
                    "data.put('taskScheduleDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd\"))"
                  ]
                },
                {
                  "name": "taskFor",
                  "condition": "true",
                  "actions": [
                    "data.put('taskFor', fhirPath.extractValue(size(Task) > 0 ? Task.get(0) : null, 'Task.for.reference'))"
                  ]
                },
                {
                  "name": "taskQuestionnaireId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskQuestionnaireId', fhirPath.extractValue(size(Task) > 0 ? Task.get(0) : null, 'Task.reasonReference.reference'))"
                  ]
                },
                {
                  "name": "showMemberTasks",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('showMemberTasks', data.get('patientActive') == 'true' && size(service.filterResources(Task, 'Task.status!=\"completed\"')) > 0)"
                  ]
                },
                {
                  "name": "serviceMemberIcons",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('serviceMemberIcons', StringUtils:join([fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\") == 'true'? 'CHILD': '', data.get('isActivePnc') ? 'BABY_MOTHER' : data.get('isPregnant') ? 'PREGNANT_WOMAN' : ''], ','))"
                  ]
                },
                {
                  "name": "relatedPersonCount",
                  "condition": "true",
                  "actions": [
                    "data.put('relatedPersonCount', size(RelatedPerson))"
                  ]
                },
                {
                  "name": "getFamilyHeadStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFamilyHeadStatus', fhirPath.extractValue(service.filterResources(RelatedPerson, 'RelatedPerson.relationship.coding.code=\"99990006\"').get(0), 'relationship.coding.display'))"
                  ]
                },
                {
                  "name": "getChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getChildStatus', fhirPath.extractValue(Patient, \"(Patient.birthDate >= today() - 5 'years')\") == 'true'? 'Child': '')"
                  ]
                },
                {
                  "name": "getPregnancyStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPregnancyStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '77386006' and Condition.clinicalStatus.coding.code = 'active'\", 'Pregnant'))"
                  ]
                },
                {
                  "name": "getFPStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFPStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99998888' and Condition.clinicalStatus.coding.code = 'active'\", 'Family Planning'))"
                  ]
                },
                {
                  "name": "getPNCStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPNCStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '234234234' and Condition.clinicalStatus.coding.code = 'active'\", 'PNC'))"
                  ]
                },
                {
                  "name": "getMentalHeathStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getMentalHeathStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990004' and Condition.clinicalStatus.coding.code = 'active'\", 'Mental Health'))"
                  ]
                },
                {
                  "name": "getHIVStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getHIVStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990003' and Condition.clinicalStatus.coding.code = 'active'\", 'HIV'))"
                  ]
                },
                {
                  "name": "getCMNTDStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getCMNTDStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990000' and Condition.clinicalStatus.coding.code = 'active'\", 'CM-NTD'))"
                  ]
                },
                {
                  "name": "getTBStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getTBStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990005' and Condition.clinicalStatus.coding.code = 'active'\", 'TB'))"
                  ]
                },
                {
                  "name": "getSickChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getSickChildStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '275142008' and Condition.clinicalStatus.coding.code = 'active'\", 'Sick Child'))"
                  ]
                },
                {
                  "name": "removalReason",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReason', fhirPath.extractValue(service.filterResources(Observation, 'Observation.code.coding.code=\"11112222\"').get(0), 'Observation.value.text'))"
                  ]
                },
                {
                  "name": "removalReasonPatient",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReasonPatient', !data.get('patientActive') ? data.get('removalReason'): '')"
                  ]
                },
                {
                  "name": "statuses",
                  "condition": "true",
                  "actions": [
                    "data.put('statuses', service.joinToString([data.get('getChildStatus'), data.get('getSickChildStatus'), data.get('getPregnancyStatus'), data.get('getFPStatus'), data.get('getPNCStatus'), data.get('getMentalHeathStatus'), data.get('getHIVStatus'),data.get('getCMNTDStatus'), data.get('getTBStatus'), data.get('removalReasonPatient'), data.get('getFamilyHeadStatus'), ...]))"
                  ]
                },
                {
                  "name": "patientRelationship",
                  "condition": "true",
                  "actions": [
                    "data.put('patientRelationship', fhirPath.extractValue(Patient, \"Patient.contact[0].select(relationship[0]).select(coding[0]).display\"))"
                  ]
                },
                {
                  "name": "isActivePnc",
                  "condition": "true",
                  "actions": [
                    "data.put('isActivePnc', service.evaluateToBoolean(Condition, \"Condition.code.text = 'PNC' \", false))"
                  ]
                },
                {
                  "name": "isPregnant",
                  "condition": "true",
                  "actions": [
                    "data.put('isPregnant', service.evaluateToBoolean(Condition, \"Condition.code.text = 'Pregnant' \", false))"
                  ]
                },
                {
                  "name": "isChild",
                  "condition": "true",
                  "actions": [
                    "data.put('isChild', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\"))"
                  ]
                },
                {
                  "name": "patientProfileIcon",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('patientProfileIcon', data.get('isChild') ? 'ic_kids' : data.get('isActivePnc') ? 'ic_baby_mother' : data.get('isPregnant') ? 'ic_pregnant' : 'ic_profile')"
                  ]
                }
              ],
              "views": [
                {
                  "viewType": "ROW",
                  "alignment": "CENTER",
                  "children": [
                    {
                      "viewType": "IMAGE_VIEW",
                      "width": 60,
                      "height": 60,
                      "reference": "@{patientProfileIcon}",
                      "color": "primaryColor",
                      "borderColor": "primaryColor"
                    },
                    {
                      "viewType": "SPACER",
                      "width": 10
                    },
                    {
                      "viewType": "SERVICE_CARD",
                      "details": [
                        {
                          "viewType": "COMPOUND_TEXT",
                          "primaryText": "@{patientName}",
                          "primaryTextColor": "@{patientTextColor}"
                        },
                        {
                          "viewType": "COMPOUND_TEXT",
                          "primaryText": "লিঙ্গঃ @{patientGender}, বয়সঃ @{patientAge}",
                          "primaryTextColor": "#939596"
                        },
                        {
                          "viewType": "COMPOUND_TEXT",
                          "primaryText": "সম্পর্কঃ @{patientRelationship}",
                          "primaryTextColor": "#939596"
                        }
                      ],
                      "serviceMemberIcons": "@{serviceMemberIcons}",
                      "actions": [
                        {
                          "trigger": "ON_CLICK",
                          "workflow": "LAUNCH_PROFILE",
                          "id": "defaultProfile",
                          "params": [
                            {
                              "paramType": "UPDATE_DATE_ON_EDIT",
                              "key": "familyLogicalId",
                              "value": "@{familyLogicalId}"
                            },
                            {
                              "paramType": "PARAMDATA",
                              "key": "isFamilyHeadExists",
                              "value": "@{isFamilyHeadExists}"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        "id": "hhDueHistory",
        "viewType": "COLUMN",
        "backgroundColor": "#FFFFFF",
        "children": [
          {
            "viewType": "CARD",
            "padding": 0,
            "visible": "@{isFamilyVisitAvailable}",
            "headerBackgroundColor": "#FFFFFF",
            "content": [
              {
                "viewType": "BUTTON",
                "smallSized": "true",
                "text": "Household Visit",
                "status": "DUE",
                "enabled": "true",
                "startIcon": {
                  "reference": "ic_household"
                },
                "actions": [
                  {
                    "trigger": "ON_CLICK",
                    "workflow": "LAUNCH_QUESTIONNAIRE",
                    "resourceType": "Group",
                    "questionnaire": {
                      "id": "6485",
                      "title": "Household Visit",
                      "saveButtonText": "Save",
                      "setPractitionerDetails": true,
                      "setOrganizationDetails": true,
                      "resourceIdentifier": "@{familyLogicalId}",
                      "resourceType": "Group"
                    },
                    "params": [
                      {
                        "key": "familyLogicalId",
                        "value": "@{familyLogicalId}",
                        "paramType": "UPDATE_DATE_ON_EDIT"
                      },
                      {
                        "paramType": "PREPOPULATE",
                        "linkId": "210afefc-3e4f-4489-86af-587ada65e06c",
                        "dataType": "STRING",
                        "key": "familyLogicalIdOnly",
                        "value": "@{familyLogicalIdOnly}"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "id": "householdDueList",
            "viewType": "LIST",
            "padding": 16,
            "resources": [
              {
                "resourceType": "Patient",
                "relatedResources": [
                  {
                    "resourceType": "CarePlan",
                    "fhirPathExpression": "CarePlan.subject.reference"
                  },
                  {
                    "resourceType": "Condition",
                    "fhirPathExpression": "Condition.subject.reference"
                  },
                  {
                    "resourceType": "Task",
                    "fhirPathExpression": "Task.for.reference"
                  },
                  {
                    "resourceType": "Observation",
                    "fhirPathExpression": "Observation.subject.reference"
                  },
                  {
                    "resourceType": "RelatedPerson",
                    "fhirPathExpression": "RelatedPerson.patient.reference"
                  }
                ]
              }
            ],
            "registerCard": {
              "rules": [
                {
                  "name": "patientName",
                  "condition": "true",
                  "actions": [
                    "data.put('patientName', fhirPath.extractValue(Patient, \"Patient.name[0].select(text)\"))"
                  ]
                },
                {
                  "name": "patientAge",
                  "condition": "true",
                  "actions": [
                    "data.put('patientAge', service.extractAge(Patient))"
                  ]
                },
                {
                  "name": "patientActive",
                  "condition": "true",
                  "actions": [
                    "data.put('patientActive', fhirPath.extractValue(Patient, 'Patient.active'))"
                  ]
                },
                {
                  "name": "patientTextColor",
                  "condition": "true",
                  "actions": [
                    "data.put('patientTextColor', Patient.active ? '#000000' : 'DefaultColor')"
                  ]
                },
                {
                  "name": "patientGender",
                  "condition": "true",
                  "actions": [
                    "data.put('patientGender', service.extractGender(Patient))"
                  ]
                },
                {
                  "name": "patientLogicalId",
                  "condition": "true",
                  "actions": [
                    "data.put('patientLogicalId', fhirPath.extractValue(Patient, 'Patient.id'))"
                  ]
                },
                {
                  "name": "activeDueTaskList",
                  "condition": "true",
                  "actions": [
                    "data.put('activeDueTaskList', service.filterResources(Task, 'Task.status=\"ready\" or Task.status=\"requested\"'))"
                  ]
                },
                {
                  "name": "serviceStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('serviceStatus',  service.evaluateToBoolean(Task, \"Task.status = 'ready' \", false) ? 'DUE' : 'UPCOMING')"
                  ]
                },
                {
                  "name": "taskDescription",
                  "condition": "true",
                  "actions": [
                    "data.put('taskDescription', fhirPath.extractValue(size(data.get('activeDueTaskList')) > 0 ? data.get('activeDueTaskList').get(0) : null, 'Task.description'))"
                  ]
                },
                {
                  "name": "taskId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskId', fhirPath.extractValue(size(data.get('activeDueTaskList')) > 0 ? data.get('activeDueTaskList').get(0) : null, 'Task.id'))"
                  ]
                },
                {
                  "name": "taskExecutionStartDate",
                  "condition": "true",
                  "actions": [
                    "data.put('taskExecutionStartDate', fhirPath.extractValue(size(data.get('activeDueTaskList')) > 0 ? data.get('activeDueTaskList').get(0) : null, 'Task.executionPeriod.start'))"
                  ]
                },
                {
                  "name": "taskScheduleDate",
                  "condition": "true",
                  "actions": [
                    "data.put('taskScheduleDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd\"))"
                  ]
                },
                {
                  "name": "taskFor",
                  "condition": "true",
                  "actions": [
                    "data.put('taskFor', fhirPath.extractValue(size(data.get('activeDueTaskList')) > 0 ? data.get('activeDueTaskList').get(0) : null, 'Task.for.reference'))"
                  ]
                },
                {
                  "name": "taskQuestionnaireId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskQuestionnaireId', fhirPath.extractValue(size(data.get('activeDueTaskList')) > 0 ? data.get('activeDueTaskList').get(0) : null, 'Task.reasonReference.reference'))"
                  ]
                },
                {
                  "name": "showMemberTasks",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('showMemberTasks', data.get('patientActive') == 'true' && size(data.get('activeDueTaskList')) > 0)"
                  ]
                },
                {
                  "name": "serviceMemberIcons",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('serviceMemberIcons', StringUtils:join([fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\") == 'true'? 'CHILD': '', data.get('isActivePnc') ? 'BABY_MOTHER' : data.get('isPregnant') ? 'PREGNANT_WOMAN' : ''], ','))"
                  ]
                },
                {
                  "name": "relatedPersonCount",
                  "condition": "true",
                  "actions": [
                    "data.put('relatedPersonCount', size(RelatedPerson))"
                  ]
                },
                {
                  "name": "getFamilyHeadStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFamilyHeadStatus', fhirPath.extractValue(service.filterResources(RelatedPerson, 'RelatedPerson.relationship.coding.code=\"99990006\"').get(0), 'relationship.coding.display'))"
                  ]
                },
                {
                  "name": "getChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getChildStatus', fhirPath.extractValue(Patient, \"(Patient.birthDate >= today() - 5 'years')\") == 'true'? 'Child': '')"
                  ]
                },
                {
                  "name": "getPregnancyStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPregnancyStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '77386006' and Condition.clinicalStatus.coding.code = 'active'\", 'Pregnant'))"
                  ]
                },
                {
                  "name": "getFPStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFPStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99998888' and Condition.clinicalStatus.coding.code = 'active'\", 'Family Planning'))"
                  ]
                },
                {
                  "name": "getPNCStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPNCStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '234234234' and Condition.clinicalStatus.coding.code = 'active'\", 'PNC'))"
                  ]
                },
                {
                  "name": "getMentalHeathStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getMentalHeathStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990004' and Condition.clinicalStatus.coding.code = 'active'\", 'Mental Health'))"
                  ]
                },
                {
                  "name": "getHIVStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getHIVStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990003' and Condition.clinicalStatus.coding.code = 'active'\", 'HIV'))"
                  ]
                },
                {
                  "name": "getCMNTDStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getCMNTDStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990000' and Condition.clinicalStatus.coding.code = 'active'\", 'CM-NTD'))"
                  ]
                },
                {
                  "name": "getTBStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getTBStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990005' and Condition.clinicalStatus.coding.code = 'active'\", 'TB'))"
                  ]
                },
                {
                  "name": "getSickChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getSickChildStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '275142008' and Condition.clinicalStatus.coding.code = 'active'\", 'Sick Child'))"
                  ]
                },
                {
                  "name": "removalReason",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReason', fhirPath.extractValue(service.filterResources(Observation, 'Observation.code.coding.code=\"11112222\"').get(0), 'Observation.value.text'))"
                  ]
                },
                {
                  "name": "removalReasonPatient",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReasonPatient', !data.get('patientActive') ? data.get('removalReason'): '')"
                  ]
                },
                {
                  "name": "statuses",
                  "condition": "true",
                  "actions": [
                    "data.put('statuses', service.joinToString([data.get('getChildStatus'), data.get('getSickChildStatus'), data.get('getPregnancyStatus'), data.get('getFPStatus'), data.get('getPNCStatus'), data.get('getMentalHeathStatus'), data.get('getHIVStatus'),data.get('getCMNTDStatus'), data.get('getTBStatus'), data.get('removalReasonPatient'), data.get('getFamilyHeadStatus'), ...]))"
                  ]
                },
                {
                  "name": "patientRelationship",
                  "condition": "true",
                  "actions": [
                    "data.put('patientRelationship', fhirPath.extractValue(Patient, \"Patient.contact[0].select(relationship[0]).select(coding[0]).display\"))"
                  ]
                },
                {
                  "name": "isActivePnc",
                  "condition": "true",
                  "actions": [
                    "data.put('isActivePnc', service.evaluateToBoolean(Condition, \"Condition.code.text = 'PNC' \", false))"
                  ]
                },
                {
                  "name": "isPregnant",
                  "condition": "true",
                  "actions": [
                    "data.put('isPregnant', service.evaluateToBoolean(Condition, \"Condition.code.text = 'Pregnant' \", false))"
                  ]
                },
                {
                  "name": "isChild",
                  "condition": "true",
                  "actions": [
                    "data.put('isChild', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\"))"
                  ]
                },
                {
                  "name": "patientProfileIcon",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('patientProfileIcon', data.get('isChild') ? 'ic_kids' : data.get('isPregnant') ? 'ic_pregnant' : data.get('isActivePnc') ? 'ic_baby_mother' : 'ic_profile')"
                  ]
                }
              ],
              "views": [
                {
                  "viewType": "SERVICE_CARD",
                  "details": [
                    {
                      "viewType": "COMPOUND_TEXT",
                      "primaryText": "@{patientName}",
                      "primaryTextColor": "@{patientTextColor}"
                    },
                    {
                      "viewType": "COMPOUND_TEXT",
                      "primaryText": "বয়সঃ @{patientAge}",
                      "primaryTextColor": "#939596"
                    }
                  ],
                  "serviceMemberIcons": "@{serviceMemberIcons}",
                  "serviceButton": {
                    "visible": "@{showMemberTasks}",
                    "text": "@{taskDescription}",
                    "status": "@{serviceStatus}",
                    "smallSized": true,
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "ae2f17cb-deff-48a6-8ece-27e6bd475f30",
                            "dataType": "DATE",
                            "key": "taskScheduleDate",
                            "value": "@{taskScheduleDate}"
                          }
                        ]
                      }
                    ]
                  },
                  "actions": [
                    {
                      "trigger": "ON_CLICK",
                      "workflow": "LAUNCH_PROFILE",
                      "id": "defaultProfile",
                      "params": [
                        {
                          "paramType": "UPDATE_DATE_ON_EDIT",
                          "key": "familyLogicalId",
                          "value": "@{familyLogicalId}"
                        },
                        {
                          "paramType": "PARAMDATA",
                          "key": "isFamilyHeadExists",
                          "value": "@{isFamilyHeadExists}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        "viewType": "COLUMN",
        "backgroundColor": "#FFFFFF",
        "children": [
          {
            "id": "householdCompletedList",
            "viewType": "LIST",
            "padding": 16,
            "resources": [
              {
                "resourceType": "Patient",
                "relatedResources": [
                  {
                    "resourceType": "CarePlan",
                    "fhirPathExpression": "CarePlan.subject.reference"
                  },
                  {
                    "resourceType": "Condition",
                    "fhirPathExpression": "Condition.subject.reference"
                  },
                  {
                    "resourceType": "Task",
                    "fhirPathExpression": "Task.for.reference"
                  },
                  {
                    "resourceType": "Observation",
                    "fhirPathExpression": "Observation.subject.reference"
                  },
                  {
                    "resourceType": "RelatedPerson",
                    "fhirPathExpression": "RelatedPerson.patient.reference"
                  }
                ]
              }
            ],
            "registerCard": {
              "rules": [
                {
                  "name": "patientName",
                  "condition": "true",
                  "actions": [
                    "data.put('patientName', fhirPath.extractValue(Patient, \"Patient.name[0].select(text)\"))"
                  ]
                },
                {
                  "name": "patientAge",
                  "condition": "true",
                  "actions": [
                    "data.put('patientAge', service.extractAge(Patient))"
                  ]
                },
                {
                  "name": "patientActive",
                  "condition": "true",
                  "actions": [
                    "data.put('patientActive', fhirPath.extractValue(Patient, 'Patient.active'))"
                  ]
                },
                {
                  "name": "patientTextColor",
                  "condition": "true",
                  "actions": [
                    "data.put('patientTextColor', Patient.active ? '#000000' : 'DefaultColor')"
                  ]
                },
                {
                  "name": "activeCompletedTaskList",
                  "condition": "true",
                  "actions": [
                    "data.put('activeCompletedTaskList', service.filterResources(Task, 'Task.status=\"completed\"'))"
                  ]
                },
                {
                  "name": "taskDescription",
                  "condition": "true",
                  "actions": [
                    "data.put('taskDescription', fhirPath.extractValue(size(data.get('activeCompletedTaskList')) > 0 ? data.get('activeCompletedTaskList').get(0), 'Task.description'))"
                  ]
                },
                {
                  "name": "taskId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskId', fhirPath.extractValue(size(data.get('activeCompletedTaskList')) > 0 ? data.get('activeCompletedTaskList').get(0), 'Task.id'))"
                  ]
                },
                {
                  "name": "taskFor",
                  "condition": "true",
                  "actions": [
                    "data.put('taskFor', fhirPath.extractValue(size(data.get('activeCompletedTaskList')) > 0 ? data.get('activeCompletedTaskList').get(0), 'Task.for.reference'))"
                  ]
                },
                {
                  "name": "taskQuestionnaireId",
                  "condition": "true",
                  "actions": [
                    "data.put('taskQuestionnaireId', fhirPath.extractValue(size(data.get('activeCompletedTaskList')) > 0 ? data.get('activeCompletedTaskList').get(0), 'Task.reasonReference.reference'))"
                  ]
                },
                {
                  "name": "showMemberTasks",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('showMemberTasks', data.get('patientActive') == 'true' && size(data.get('activeCompletedTaskList')) > 0)"
                  ]
                },
                {
                  "name": "serviceMemberIcons",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('serviceMemberIcons', StringUtils:join([fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\") == 'true'? 'CHILD': '', data.get('isActivePnc') ? 'BABY_MOTHER' : data.get('isPregnant') ? 'PREGNANT_WOMAN' : ''], ','))"
                  ]
                },
                {
                  "name": "getFamilyHeadStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFamilyHeadStatus', fhirPath.extractValue(service.filterResources(RelatedPerson, 'RelatedPerson.relationship.coding.code=\"99990006\"').get(0), 'relationship.coding.display'))"
                  ]
                },
                {
                  "name": "getChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getChildStatus', fhirPath.extractValue(Patient, \"(Patient.birthDate >= today() - 5 'years')\") == 'true'? 'Child': '')"
                  ]
                },
                {
                  "name": "getPregnancyStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPregnancyStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '77386006' and Condition.clinicalStatus.coding.code = 'active'\", 'Pregnant'))"
                  ]
                },
                {
                  "name": "getFPStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getFPStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99998888' and Condition.clinicalStatus.coding.code = 'active'\", 'Family Planning'))"
                  ]
                },
                {
                  "name": "getPNCStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getPNCStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '234234234' and Condition.clinicalStatus.coding.code = 'active'\", 'PNC'))"
                  ]
                },
                {
                  "name": "getMentalHeathStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getMentalHeathStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990004' and Condition.clinicalStatus.coding.code = 'active'\", 'Mental Health'))"
                  ]
                },
                {
                  "name": "getHIVStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getHIVStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990003' and Condition.clinicalStatus.coding.code = 'active'\", 'HIV'))"
                  ]
                },
                {
                  "name": "getCMNTDStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getCMNTDStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990000' and Condition.clinicalStatus.coding.code = 'active'\", 'CM-NTD'))"
                  ]
                },
                {
                  "name": "getTBStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getTBStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '99990005' and Condition.clinicalStatus.coding.code = 'active'\", 'TB'))"
                  ]
                },
                {
                  "name": "getSickChildStatus",
                  "condition": "true",
                  "actions": [
                    "data.put('getSickChildStatus', service.mapResourcesToLabeledCSV(Condition, \"Condition.code.coding.code = '275142008' and Condition.clinicalStatus.coding.code = 'active'\", 'Sick Child'))"
                  ]
                },
                {
                  "name": "removalReason",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReason', fhirPath.extractValue(service.filterResources(Observation, 'Observation.code.coding.code=\"11112222\"').get(0), 'Observation.value.text'))"
                  ]
                },
                {
                  "name": "removalReasonPatient",
                  "condition": "true",
                  "actions": [
                    "data.put('removalReasonPatient', !data.get('patientActive') ? data.get('removalReason'): '')"
                  ]
                },
                {
                  "name": "isActivePnc",
                  "condition": "true",
                  "actions": [
                    "data.put('isActivePnc', service.evaluateToBoolean(Condition, \"Condition.code.text = 'PNC' \", false))"
                  ]
                },
                {
                  "name": "isPregnant",
                  "condition": "true",
                  "actions": [
                    "data.put('isPregnant', service.evaluateToBoolean(Condition, \"Condition.code.text = 'Pregnant' \", false))"
                  ]
                },
                {
                  "name": "isChild",
                  "condition": "true",
                  "actions": [
                    "data.put('isChild', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\"))"
                  ]
                },
                {
                  "name": "patientProfileIcon",
                  "condition": "true",
                  "priority": 2,
                  "actions": [
                    "data.put('patientProfileIcon', data.get('isChild') ? 'ic_kids' : data.get('isPregnant') ? 'ic_pregnant' : data.get('isActivePnc') ? 'ic_baby_mother' : 'ic_profile')"
                  ]
                }
              ],
              "views": [
                {
                  "viewType": "SERVICE_CARD",
                  "details": [
                    {
                      "viewType": "COMPOUND_TEXT",
                      "primaryText": "@{patientName}",
                      "primaryTextColor": "@{patientTextColor}"
                    },
                    {
                      "viewType": "COMPOUND_TEXT",
                      "primaryText": "বয়সঃ @{patientAge}",
                      "primaryTextColor": "#939596"
                    }
                  ],
                  "serviceMemberIcons": "@{serviceMemberIcons}",
                  "serviceButton": {
                    "visible": "@{showMemberTasks}",
                    "text": "@{taskDescription}",
                    "status": "COMPLETED",
                    "smallSized": true,
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        }
                      }
                    ]
                  },
                  "actions": [
                    {
                      "trigger": "ON_CLICK",
                      "workflow": "LAUNCH_PROFILE",
                      "id": "defaultProfile",
                      "params": [
                        {
                          "paramType": "UPDATE_DATE_ON_EDIT",
                          "key": "familyLogicalId",
                          "value": "@{familyLogicalId}"
                        },
                        {
                          "paramType": "PARAMDATA",
                          "key": "isFamilyHeadExists",
                          "value": "@{isFamilyHeadExists}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    ]
  },
  "overFlowMenuItems": [
    {
      "title": "Family details",
      "titleColor": "#000000",
      "visible": "true",
      "actions": [
        {
          "trigger": "ON_CLICK",
          "workflow": "LAUNCH_QUESTIONNAIRE",
          "questionnaire": {
            "id": "2870",
            "title": "{{add.family}}",
            "saveButtonText": "Update household details",
            "setPractitionerDetails": true,
            "setOrganizationDetails": true,
            "type": "EDIT",
            "resourceIdentifier": "@{familyLogicalId}",
            "resourceType": "Group",
            "params": [
              {
                "key": "familyLogicalId",
                "value": "@{familyLogicalId}",
                "paramType": "UPDATE_DATE_ON_EDIT"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Change family head",
      "titleColor": "#000000",
      "visible": "true",
      "actions": [
        {
          "trigger": "ON_CLICK",
          "workflow": "CHANGE_MANAGING_ENTITY",
          "managingEntity": {
            "nameFhirPathExpression": "Patient.name.given + ' ' + Patient.name.family | Patient.name.given",
            "resourceType": "Patient",
            "eligibilityCriteriaFhirPathExpression": "Patient.active and (Patient.birthDate <= today() - 5 'years')",
            "dialogTitle": "{{ assign.household.head.title }}",
            "dialogWarningMessage": "{{ assign.household.head.warning }}",
            "dialogContentMessage": "{{ select.new.household.head }}",
            "noMembersErrorMessage": "{{ no.members.error.message }}",
            "managingEntityReassignedMessage": "Household head reassigned successfully",
            "relationshipCode": {
              "system": "http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype",
              "code": "99990006",
              "display": "Family Head"
            }
          }
        }
      ]
    }
  ]
}
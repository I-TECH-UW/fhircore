map "https://fhir.labs.smartregister.org/fhir/StructureMap/6057" = "mPower PNC Followup Visit"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group PNCFollowupVisit(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = "collection" "r_bundle_type";
    src -> evaluate(src, $this.subject) as refPatient then
      ExtractEncounter(src, bundle, refPatient) "r_bundle_entries";
}

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient : Reference) {
    src -> bundle.entry as entry, entry.resource = create('Task') as completedTask then ExtractCompletedTask(src, completedTask) "r_extract_completed_task";

    src.item as has_referred where(linkId = '0418baa2-f7d4-4b8d-cba0-5718460ffb7a' and answer.value.code = 'yes') then {
        src -> bundle.entry as entry, entry.resource = create('Task') as dueTask then ExtractDueTask(src, dueTask) "r_extract_due_task";
    } "referred_check_and_extract_due_task";

    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
    	src -> encounter.id = uuid() "r_en_id";
    	src -> encounter.status = 'finished' "r_en_st";
    	src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_en_cls";
    	src -> encounter.type = create('CodeableConcept') as concept then {
    		src -> concept.coding = c("http://example.org/CodeSystem/encounter-type", "pnc-contact-in-brac") as coding then {
    			src -> coding.display = 'Postnatal care contact in brac' "r_en_cod_disp";
   			} "r_en_cc_cod";
    		src -> concept.text = 'Postnatal care contact in brac' "r_en_typ_text";
    	} "r_en_typ";
        src -> encounter.priority = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL") as coding then {
                src -> coding.display = 'elective' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = 'elective' "r_en_prio_text";
        } "r_en_prio";
    	src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
    	// src -> encounter.participant = automatically set by code in questionnaire view model
    	src -> encounter.period = create('Period') as enPeriod then {
    		src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
    		src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
    	} "r_en_per";

    	src.item where((linkId = 'e37db999-ea58-44de-c4b7-6e49d36a337c').exists()) then {
    	    src -> encounter.reasonCode = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://mpower-social.com/", "pnc_followup_visit_before_48hrs") as coding then {
                    src -> coding.display = 'mPower PNC Followup Visit' "r_en_rc_cod_disp";
                } "r_en_rc_cod";
                src -> concept.text = 'mPower PNC Followup Visit' "r_en_text";
            } "r_en_reason";
    	} "r_en_reason_before_48";

    	src.item where((linkId = 'e37db999-ea58-44de-c4b7-6e49d36a337c').exists().not()) then {
    	    src -> encounter.reasonCode = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://mpower-social.com/", "pnc_followup_visit_after_48hrs") as coding then {
                    src -> coding.display = 'mPower PNC Followup Visit' "r_en_rc_cod_disp";
                } "r_en_rc_cod";
                src -> concept.text = 'mPower PNC Followup Visit' "r_en_text";
            } "r_en_reason";
    	} "r_en_reason_after_48";

    	src.item where(linkId = '35d80d98-3850-4dba-85d1-0beb44837473' and answer.value.code = 'yes') then {
    	    src.item as fpMethod where(linkId = '15406c59-beb9-447c-8c59-c9086b0d187f' and answer.value.exists()) then {
                src -> evaluate(fpMethod, $this.answer.value.code) as fpMethodCode then {
                     src then extractFPCondition(src, bundle, encounter, refPatient, fpMethodCode) "r_bundle_entries";
                } "rule_fp_method_extra";
            } "rule_fp_method_check";
        } "rule_fp_method_check_yes";

    	src.item where(linkId = '35d80d98-3850-4dba-85d1-0beb44837473' and answer.value.code = 'no') then {
    	    src then extractNotFPCondition(src, bundle, encounter, refPatient) "r_bundle_entries";
        } "rule_fp_method_check_no";
    } "r_en";
}

group extractFPCondition(source questionnaireResponse : QuestionnaireResponse, target bundle : Bundle, target encounter: Encounter, source refPatient : Reference, source fpMethodCode : String) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create("Condition") as cnd then {
    	questionnaireResponse -> cnd.id = uuid() "r_cnd_id";
		questionnaireResponse -> cnd.onset = evaluate(questionnaireResponse, now()) "r_cnd_onset_date_val";
    	questionnaireResponse -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") "r_cnd_clinical_st";
    	questionnaireResponse -> cnd.verificationStatus = cc("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") "r_cnd_verif_st";
    	questionnaireResponse -> cnd.category = cc("http://terminology.hl7.org/CodeSystem/condition-category", "problem-list-item", "Problem List Item") "r_cnd_category";
    	questionnaireResponse -> cnd.subject = refPatient "r_cnd_sub";
    	questionnaireResponse -> cnd.recordedDate = evaluate(questionnaireResponse, now()) "r_cnd_recorded";

    	questionnaireResponse -> cnd.code = create("CodeableConcept") as ccPreg then {
             questionnaireResponse -> ccPreg.coding = c("http://snomed.info/sct", "99998888", "Family Planning") "r_cnd_code_coding";
             questionnaireResponse -> ccPreg.text = fpMethodCode "r_cnd_code_text";
        } "r_cnd_code";

        questionnaireResponse -> cnd.encounter = reference(encounter) "r_new_fp_encounter";
    } "r_cnd";
}

group extractNotFPCondition(source questionnaireResponse : QuestionnaireResponse, target bundle : Bundle, target encounter: Encounter, source refPatient : Reference) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create("Condition") as cnd then {
    	questionnaireResponse -> cnd.id = uuid() "r_cnd_id";
		questionnaireResponse -> cnd.onset = evaluate(questionnaireResponse, now()) "r_cnd_onset_date_val";
    	questionnaireResponse -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") "r_cnd_clinical_st";
    	questionnaireResponse -> cnd.verificationStatus = cc("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") "r_cnd_verif_st";
    	questionnaireResponse -> cnd.category = cc("http://terminology.hl7.org/CodeSystem/condition-category", "problem-list-item", "Problem List Item") "r_cnd_category";
    	questionnaireResponse -> cnd.subject = refPatient "r_cnd_sub";
    	questionnaireResponse -> cnd.recordedDate = evaluate(questionnaireResponse, now()) "r_cnd_recorded";

    	questionnaireResponse -> cnd.code = create("CodeableConcept") as ccPreg then {
             questionnaireResponse -> ccPreg.coding = c("http://snomed.info/sct", "99990000", "No Family Planning") "r_cnd_code_coding";
             questionnaireResponse -> ccPreg.text = "No Family Planning" "r_cnd_code_text";
        } "r_cnd_code";

        questionnaireResponse -> cnd.encounter = reference(encounter) "r_new_fp_encounter";
    } "r_cnd";
}

group ExtractCompletedTask(
    source questionnaireResponse : QuestionnaireResponse,
    target task: Task) {

    questionnaireResponse -> create('Period') as period then {
        questionnaireResponse -> evaluate(questionnaireResponse, now()) as startDate,
                                 evaluate(questionnaireResponse, now()) as endDate
                                 then extractPeriodTime(startDate, endDate, period) "r_task_period_extra";

        questionnaireResponse -> task.executionPeriod = period "r_task_per";
    } "r_per";

    questionnaireResponse -> evaluate(questionnaireResponse, task.executionPeriod.start) as lastModified then {
        questionnaireResponse -> task.lastModified = lastModified "r_task_last_modified";
    } "r_last_modified";

    questionnaireResponse -> task.id = uuid(),
           task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
           task.identifier = create('Identifier') as iden, iden.value = 'followup_routine_visit', iden.use = 'secondary',
           task.status = 'completed',
           task.intent = 'plan',
           task.priority = 'routine',
           task.description = 'PNC Followup Visit',
           task.for = evaluate(questionnaireResponse, $this.subject),
           task.authoredOn = evaluate(questionnaireResponse, now()),
           task.requester = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
           task.owner = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
           task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/6058' "r_task_data";

    questionnaireResponse.item as task_name where(linkId = '54777657-5ff3-44d6-fe0d-317cce261588' and answer.value.exists()) then {
        questionnaireResponse -> task.description = evaluate(task_name, $this.answer.value) "r_task_desc";
    } "check_task_name";
}

group ExtractDueTask(source questionnaireResponse : QuestionnaireResponse, target task: Task) {

    questionnaireResponse -> create('Period') as period then {
        questionnaireResponse -> evaluate(questionnaireResponse, now()) as startDate,
                                 evaluate(questionnaireResponse, now() + '7 \'days\''.toQuantity()) as endDate
                                 then extractPeriodTime(startDate, endDate, period) "r_task_period_extra";

        questionnaireResponse -> task.executionPeriod = period "r_task_per";
    } "r_per";

    questionnaireResponse -> task.id = uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.identifier = create('Identifier') as iden, iden.value = 'followup_routine_visit', iden.use = 'secondary',
            task.status = 'ready',
            task.intent = 'plan',
            task.priority = 'routine',
            task.description = 'Referral Follow-up Visit',
            task.for = evaluate(questionnaireResponse, $this.subject),
            task.authoredOn = evaluate(questionnaireResponse, now()),
            task.requester = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.owner = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/4235' "r_task_data";

    questionnaireResponse.item as refer_reason where(linkId = '3d005338-3602-408d-fbca-d429cfda7ea8' and answer.value.exists()) then {
        questionnaireResponse -> task.input = create('Task_Input') as input then {
            questionnaireResponse -> input.value = create('CodeableConcept') as taskCode then {
                questionnaireResponse -> taskCode.coding = create('Coding') as coding then {
                    questionnaireResponse -> coding.system = 'https://www.mpower-social.com/' "r_en_cod_system";
                    questionnaireResponse -> coding.code = evaluate(refer_reason, $this.answer.value.code) "r_en_cod_cod";
                    questionnaireResponse -> coding.display = evaluate(refer_reason, $this.answer.value.display) "r_en_cod_disp";
                } "r_en_cc_cod";
                questionnaireResponse -> taskCode.text = evaluate(refer_reason, answer.value.display) "r_en_text";
            } "r_task_input_cod";
       } "r_task_input";
    } "check_refer_reason";
}

group extractPeriodTime(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}
map "http://fhir.mpower-social.com:7070/fhir/StructureMap/4967" = "mPower NCD Facility Service"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ChildVisit(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle) {
    questionnaireResponse -> bundle.type = "collection" "r_bundle_type";
    questionnaireResponse -> evaluate(questionnaireResponse, $this.subject) as refPatient then extractEncounter(questionnaireResponse, bundle, refPatient) "r_bundle_entries";
}

group extractEncounter(source questionnaireResponse : QuestionnaireResponse, target bundle : Bundle, source refPatient : Reference) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create('Task') as task then ExtractTask(questionnaireResponse, refPatient, task) "r_extract_task";
    questionnaireResponse -> bundle.entry as entry, entry.resource = create('Task') as dueTask then ExtractDueTask(questionnaireResponse, refPatient, dueTask) "r_extract_due_task";

    questionnaireResponse -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        questionnaireResponse -> encounter.id = uuid() "r_en_id";
        questionnaireResponse -> encounter.status = 'finished' "r_en_st";
        questionnaireResponse -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_en_cls";
        questionnaireResponse -> encounter.type = create('CodeableConcept') as concept then {
            questionnaireResponse -> concept.coding = c("https://www.mpower-social.com/", "ncd_facility_service") as coding then {
                questionnaireResponse -> coding.display = 'NCD Facility Service' "r_en_cod_disp";
            } "r_en_cc_cod";
            questionnaireResponse -> concept.text = 'NCD Facility Service' "r_en_typ_text";
        } "r_en_typ";
        questionnaireResponse -> encounter.priority = create('CodeableConcept') as concept then {
            questionnaireResponse -> concept.coding = c("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL") as coding then {
                questionnaireResponse -> coding.display = 'Elective' "r_en_cod_disp";
            } "r_en_cc_cod";
            questionnaireResponse -> concept.text = 'Elective' "r_en_prio_text";
        } "r_en_prio";
        questionnaireResponse.subject as subject -> encounter.subject = subject "r_en_sub";
        questionnaireResponse -> encounter.period = create('Period') as enPeriod then {
            questionnaireResponse -> enPeriod.start = evaluate(questionnaireResponse, now()) "r_en_per_start";
            questionnaireResponse -> enPeriod.end = evaluate(questionnaireResponse, now()) "r_en_per_end";
        } "r_en_per";
        questionnaireResponse -> encounter.reasonCode = create('CodeableConcept') as concept then {
            questionnaireResponse -> concept.coding = c("https://www.mpower-social.com/", "ncd_facility_service") as coding then {
                questionnaireResponse -> coding.display = 'NCD Facility Service' "r_en_cod_disp";
            } "r_en_cc_cod";
            questionnaireResponse -> concept.text = 'NCD Facility Service' "r_en_text";
        } "r_en_reason";
    	questionnaireResponse -> create('Reference') as refCommodity, create('integer') as previousBal then {
            questionnaireResponse then extractCommodityReference(questionnaireResponse, refCommodity, previousBal) "r_populate_commodity_ref";
            questionnaireResponse then extractObservation(questionnaireResponse, bundle, encounter , refCommodity, previousBal) "rule_comodity_observation";
        } "r_commodity_ref";
    } "r_en";
}

group ExtractTask(
    source questionnaireResponse : QuestionnaireResponse,
    source subject : Reference,
    target task: Task) {

    questionnaireResponse -> create('Period') as period then {
        questionnaireResponse -> evaluate(questionnaireResponse, now()) as startDate,
                                 evaluate(questionnaireResponse, now()) as endDate
                                 then extractPeriodTime(startDate, endDate, period) "r_task_period_extra";

        questionnaireResponse -> task.executionPeriod = period "r_task_per";
    } "r_per";

    questionnaireResponse -> evaluate(questionnaireResponse, task.executionPeriod.start) as lastModified then {
        questionnaireResponse -> task.lastModified = lastModified "r_task_last_modified";
    } "r_last_modified";

    questionnaireResponse -> task.id = uuid(),
           task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
           task.identifier = create('Identifier') as iden, iden.value = 'followup_routine_visit', iden.use = 'secondary',
           task.status = 'completed',
           task.intent = 'plan',
           task.priority = 'routine',
           task.description = 'NCD Facility Service',
           task.for = subject,
           task.authoredOn = evaluate(questionnaireResponse, now()),
           task.requester = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
           task.owner = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
           task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/4968' "r_task_data";

    questionnaireResponse.item as refer_reason where(linkId = 'fe713e46-42bc-4931-8364-d4945cd0ea26' and answer.value.exists()) then {
        questionnaireResponse -> task.input = create('Task_Input') as input then {
            questionnaireResponse -> input.value = create('CodeableConcept') as taskCode then {
                questionnaireResponse -> taskCode.coding = create('Coding') as coding then {
                    questionnaireResponse -> coding.system = 'https://www.mpower-social.com/' "r_en_cod_system";
                    questionnaireResponse -> coding.code = evaluate(refer_reason, $this.answer.value.code) "r_en_cod_cod";
                    questionnaireResponse -> coding.display = evaluate(refer_reason, $this.answer.value.display) "r_en_cod_disp";
                } "r_en_cc_cod";
                questionnaireResponse -> taskCode.text = evaluate(refer_reason, answer.value.display) "r_en_text";
            } "r_task_input_cod";
       } "r_task_input";
    } "check_refer_reason";
}

group ExtractDueTask(
    source questionnaireResponse : QuestionnaireResponse,
    source subject : Reference,
    target task: Task) {

    questionnaireResponse -> create('Period') as period then {
        questionnaireResponse -> evaluate(questionnaireResponse, now()) as startDate,
                                 evaluate(questionnaireResponse, now() + '7 \'days\''.toQuantity()) as endDate
                                 then extractPeriodTime(startDate, endDate, period) "r_task_period_extra";

        questionnaireResponse -> task.executionPeriod = period "r_task_per";
    } "r_per";

    questionnaireResponse -> task.id = uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.identifier = create('Identifier') as iden, iden.value = 'followup_routine_visit', iden.use = 'secondary',
            task.status = 'ready',
            task.intent = 'plan',
            task.priority = 'routine',
            task.description = 'Referral Follow-up Visit',
            task.for = subject,
            task.authoredOn = evaluate(questionnaireResponse, now()),
            task.requester = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.owner = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/4235' "r_task_data";

    questionnaireResponse.item as refer_reason where(linkId = 'fe713e46-42bc-4931-8364-d4945cd0ea26' and answer.value.exists()) then {
        questionnaireResponse -> task.input = create('Task_Input') as input then {
            questionnaireResponse -> input.value = create('CodeableConcept') as taskCode then {
                questionnaireResponse -> taskCode.coding = create('Coding') as coding then {
                    questionnaireResponse -> coding.system = 'https://www.mpower-social.com/' "r_en_cod_system";
                    questionnaireResponse -> coding.code = evaluate(refer_reason, $this.answer.value.code) "r_en_cod_cod";
                    questionnaireResponse -> coding.display = evaluate(refer_reason, $this.answer.value.display) "r_en_cod_disp";
                } "r_en_cc_cod";
                questionnaireResponse -> taskCode.text = evaluate(refer_reason, answer.value.display) "r_en_text";
            } "r_task_input_cod";
       } "r_task_input";
    } "check_refer_reason";
}

group extractPeriodTime(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}

group extractObservation(source src : QuestionnaireResponse, target bundle : Bundle, source encounter : Encounter, source refCommodity : Reference, source previousBal: Integer) {
    src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
        src -> obs.id = uuid() "r_obs_id";
        src -> obs.status = 'preliminary' "r_obs_status";
        src -> obs.category = cc('http://snomed.info/sct','386452003', 'Supply management') "r_obs_category_1";
        src -> obs.category = cc('http://hl7.org/fhir/inventoryreport-counttype', 'subtraction', 'Subtraction')"r_obs_category_2";
        src -> obs.code = create('CodeableConcept') as code then {
            src -> code.coding = create('Coding') as coding then {
                src -> coding.system = 'https://smartregister.org/' "r_obs_coding_system";
                src -> coding.code = 'consumption' "r_obs_c_coding_code";
                src -> coding.display = 'consumption' "r_obs_c_coding_display";
            } "r_obs_c_coding";
            src -> code.text = 'consumption' "r_obs_c_text";
        } "r_obs_code";
        src -> obs.subject = refCommodity "r_obs_subject";
        src -> obs.effective = evaluate(src, now()) "r_effective_current_date_time";
        src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
        src -> obs.value = create('Quantity') as qty then {
            src -> qty.value = 1,
                qty.unit = 'Pieces',
                qty.system = 'http://snomed.info/sct',
                qty.code = '767525000' "r_obs_qty";
        } "r_obs_value";
        src -> obs.encounter = reference(encounter) "r_observation_encounter";

        src -> evaluate(src, (previousBal - 1)) as runningTotal  then {
             //Adding the running total component
            src -> obs.component as component then extractRunningBalance(src, component, runningTotal) "r_obs_running_total_component";

            //create stockout flag if none exists and total balance is Zero or less
            src as stockOut where (runningTotal <= 0) then {
                //create ncd visit stockout flag
                src.item where (linkId = 'f8f3bc72-bd58-4d0a-8c1a-a065b5b3e370' and answer.value.empty()) then {
                    src then createStockOutFlag(src, bundle, encounter, refCommodity) "r_create_ncd_visit_stockout_flag";
                } "r_no_ncd_visit_flag";
            } "r_bal_is_zero";
        } "r_running_total_compute";

        //Update the current latest ncd visit observation if it exists
        src.item as latestObservation where(linkId ='ea04ab78-4fc1-4d1e-ebdb-d1cb336a2ea2' and answer.value.exists()) then {
            src ->  evaluate(latestObservation, $this.answer.value) as latestObservationId then updateLatestObservation(src, bundle, latestObservationId)  "r_update_current_latest_obs";
        } "r_check_latest_obs";
    } "r_obs";
}

group extractCommodityReference(source src: QuestionnaireResponse, target ref: Reference, target previousBal: Integer) {
    src -> previousBal.value = "0" "r_instantiate_bal";
    //commodity group reference
    src -> ref.reference = 'Group/2dfbaf0d-b207-4b43-9536-1daa4d5efcae' "r_ncd_visit_ref";
    //stock balance
    src.item as ncdBalance where(linkId = 'd453652f-2d89-47d5-dd62-5a6bf1f695c9' and answer.value.exists()) then {
        src -> previousBal.value = evaluate(ncdBalance, $this.answer.value.toString()) "r_ncd_visit_previous_bal";
    } "r_check_ncd_visit_prev_bal";
}

group extractRunningBalance(source src: QuestionnaireResponse, target component: BackboneElement, source runningTotal : Integer){
    src -> component.code = create('CodeableConcept') as runningTotalCC then {
        src -> runningTotalCC.coding = create('Coding') as runningTotalCCCoding then {
            src -> runningTotalCCCoding.system = 'http://snomed.info/sct' "r_obs_runing_total_cc_coding_system";
            src -> runningTotalCCCoding.code = '255619001' "r_obs_runing_total_cc_coding_code";
            src -> runningTotalCCCoding.display = 'Total' "r_obs_runing_total_cc_coding_display";
        } "r_obs_running_total_cc_coding";
        src -> runningTotalCC.text = 'Running total/Cumulative sum' "r_obs_runing_total_cc_text";
    } "r_obs_running_total_code";

    src -> component.value = create('Quantity') as runningTotalQuantity then {
        src -> runningTotalQuantity.value = runningTotal "r_obs__running_total_qty";
    } "r_obs_running_total_quantity";
}

group updateLatestObservation(source src: src, target bundle : Bundle, source latestObservationId : String){
    src -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
        src -> observation.id = create('id') as id then {
            src -> id.value = latestObservationId "r_update_obs_id_value";
        } "r_update_obs_id";
        src -> observation.status = 'final' "r_update_latest_obs_to_final";
    } "r_update_latest_obs";
}

group createStockOutFlag(source src: src, target bundle : Bundle, source encounter : Encounter, source refCommodity: Reference){
    src -> bundle.entry as entry, entry.resource = create('Flag') as flag then {
        src -> flag.id = uuid() "r_flag_id";
        src -> flag.status = 'active' "r_flag_status";
        src -> flag.category = cc('http://snomed.info/sct','386452003', 'Supply management') "r_flag_category";
        src -> flag.code = cc('http://snomed.info/sct','419182006', ' Supplies not available')  "r_flag_code";
        src -> flag.subject = refCommodity "r_flag_subject";
        src -> flag.period = create('Period') as period then {
            src -> period.start = evaluate(src, now()) "r_flag_period_start";
        } "r_flag_period";
        src -> flag.encounter = reference(encounter) "r_flag_encounter";
    } "r_flag";
}
map "https://fhir.labs.smartregister.org/fhir/StructureMap/6003" = "mPower PNC Registration"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group PNCRegistration(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = "collection" "r_bundle_type";
    src -> evaluate(src, $this.subject) as refPatient then
        extractPNCResources(src, bundle, refPatient), extractPNCEncounter(src, bundle, refPatient) "r_bundle_entries";
}

group extractPNCResources(source src : QuestionnaireResponse, target bundle : Bundle, source refPatient : Reference) {
    src.item as item_pnc_started where(linkId ='33455692-f8b4-4b90-809a-94352aad1e2f' and answer.value.code = 'born-alive') then {
        src then ExtractPNCCondition(src, bundle, refPatient) "rule_pnc_condition";
        src then UpdateANCCondition(src, bundle, refPatient) "rule_update_anc_condition";
    } "rule_live_birth_check";
}
group extractPregnancyOutcomeObservation(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient, source encounter : Encounter){
    src.item where(linkId ='33455692-f8b4-4b90-809a-94352aad1e2f' and answer.value.code = 'born-alive') then {
        src then extractPregnancyOutcomeObservationLiveBirth(src, bundle, refPatient, encounter) "rule_pregnancy_outcome_observation";
    } "rule_pregnancy_outcome_observation";
    src.item as item where(linkId ='33455692-f8b4-4b90-809a-94352aad1e2f' and answer.value.code = 'still-born') then {
        src then ExtractPregnancyOutcomeObservationStillBirth(src, bundle, refPatient, encounter) "rule_pregnancy_outcome_observation";
    } "rule_pregnancy_outcome_observation";
    src.item as item where(linkId ='33455692-f8b4-4b90-809a-94352aad1e2f' and answer.value.code = 'born-alive-died') then {
        src then ExtractPregnancyOutcomeObservationNewbornDeath(src, bundle, refPatient, encounter) "rule_pregnancy_outcome_observation";
    } "rule_pregnancy_outcome_observation";
    src.item as item where(linkId ='33455692-f8b4-4b90-809a-94352aad1e2f' and answer.value.code = 'miscarriage') then {
        src then ExtractPregnancyOutcomeObservationWhenMiscarriage(src, bundle, refPatient, encounter) "rule_pregnancy_outcome_observation";
    } "rule_pregnancy_outcome_observation";
}
group extractPregnancyOutcomeObservationLiveBirth(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient, source encounter : Encounter){
    src -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
        src -> observation.id = uuid() "rule_observation_id";
        src -> observation.code = create('CodeableConcept') as code then {
            src -> code.coding = create('Coding') as coding then {
                src -> coding.system = 'http://snomed.info/sct' "rule_observation_coding_system";
                src -> coding.code = '281050002' "r_obs_c_coding_code";
                src -> coding.display = 'Live birth' "r_obs_c_coding_disp";
            } "r_obs_c_coding";
        } "r_obs_code";
        src -> observation.subject = refPatient "rule_observation_subject";
        src -> observation.encounter = reference(encounter) "rule_observation_encounter";
        src -> observation.status = 'final' "rule_observation_status";
        src -> observation.category = cc('http://snomed.info/sct','169812000', 'Place of birth') "rule_observation_category_1";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code = 'home') then {
            src -> observation.category = cc('http://snomed.info/sct', '169813005', 'Home')"r_obs_category_home";
        } "r_obs_category_live_home_category_2";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code = 'other') then {
            src -> observation.category = cc('http://snomed.info/sct', '74964007', 'Other')"r_obs_category_live_other";
        } "r_obs_category_live_other_category_2";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code != 'home' or answer.value.code != 'other') then {
            src -> observation.category = cc('http://snomed.info/sct', '52668009', 'Facility')"r_obs_category_live_facility";
        } "r_obs_category_live_facility_category_2";
        src -> observation.category = cc('http://snomed.info/sct', '169826009', 'Pregnancy Outcome Type')"r_obs_category_3";
        src.item as item where(linkId = 'dc861744-59eb-4569-d4fb-1e811e93a66f') then {
            item.answer first as deliveryDate then {
                deliveryDate.value as val -> observation.effective = create('dateTime') as dt,
                dt.value = evaluate(val, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_effective_current_date_time";
            } "r_observation_effective";
        }"r_effective_current_date_time";
    } "r_observation_v2";
}

group ExtractPregnancyOutcomeObservationStillBirth(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient, source encounter : Encounter){
    src -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
        src -> observation.id = uuid() "rule_observation_id";
        src -> observation.code = create('CodeableConcept') as code then {
            src -> code.coding = create('Coding') as coding then {
                src -> coding.system = 'http://snomed.info/sct' "rule_observation_coding_system";
                src -> coding.code = '237364002' "r_obs_c_coding_code";
                src -> coding.display = 'Still birth' "r_obs_c_coding_disp";
            } "r_obs_c_coding";
        } "r_obs_code";
        src -> observation.subject = refPatient "rule_observation_subject";
        src -> observation.encounter = reference(encounter) "rule_observation_encounter";
        src -> observation.status = 'final' "rule_observation_status";
        src -> observation.category = cc('http://snomed.info/sct','169812000', 'Place of birth') "rule_observation_category_1";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code = 'home') then {
            src -> observation.category = cc('http://snomed.info/sct', '169813005', 'Home')"r_obs_category_home";
        } "r_obs_category_live_home_category_2";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code = 'other') then {
            src -> observation.category = cc('http://snomed.info/sct', '74964007', 'Other')"r_obs_category_live_other";
        } "r_obs_category_live_other_category_2";
        src.item as item where(linkId = '9a836c2a-b187-43f3-8c7a-f70e67d92943' and answer.value.code != 'home' or answer.value.code != 'other') then {
            src -> observation.category = cc('http://snomed.info/sct', '52668009', 'Facility')"r_obs_category_live_facility";
        } "r_obs_category_live_facility_category_2";
        src -> observation.category = cc('http://snomed.info/sct', '169826009', 'Pregnancy Outcome Type')"r_obs_category_3";
        src.item as item where(linkId = 'dc861744-59eb-4569-d4fb-1e811e93a66f') then {
            item.answer first as deliveryDate then {
                deliveryDate.value as val -> observation.effective = create('dateTime') as dt,
                dt.value = evaluate(val, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_effective_current_date_time";
            } "r_observation_effective";
        }"r_effective_current_date_time";
    } "r_observation_v2";
}

group ExtractPregnancyOutcomeObservationNewbornDeath(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient, source encounter : Encounter){
    src -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
        src -> observation.id = uuid() "rule_observation_id";
        src -> observation.code = create('CodeableConcept') as code then {
            src -> code.coding = create('Coding') as coding then {
                src -> coding.system = 'http://snomed.info/sct' "rule_observation_coding_system";
                src -> coding.code = '276506001' "r_obs_c_coding_code";
                src -> coding.display = 'Newborn death' "r_obs_c_coding_disp";
            } "r_obs_c_coding";
        } "r_obs_code";
        src -> observation.subject = refPatient "rule_observation_subject";
        src -> observation.encounter = reference(encounter) "rule_observation_encounter";
        src -> observation.status = 'final' "rule_observation_status";
        src -> observation.category = cc('http://snomed.info/sct', '169826009', 'Pregnancy Outcome Type')"r_obs_category_3";
        src.item as item where(linkId = 'dc861744-59eb-4569-d4fb-1e811e93a66f') then {
            item.answer first as deliveryDate then {
                deliveryDate.value as val -> observation.effective = create('dateTime') as dt,
                dt.value = evaluate(val, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_effective_current_date_time";
            } "r_observation_effective";
        }"r_effective_current_date_time";
    } "r_observation_v2";
}

group ExtractPregnancyOutcomeObservationWhenMiscarriage(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient, source encounter : Encounter){
    src -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
        src -> observation.id = uuid() "rule_observation_id";
        src -> observation.code = create('CodeableConcept') as code then {
            src -> code.coding = create('Coding') as coding then {
                src -> coding.system = 'http://snomed.info/sct' "rule_observation_coding_system";
                src -> coding.code = '17369002' "r_obs_c_coding_code";
                src -> coding.display = 'Miscarriage' "r_obs_c_coding_disp";
            } "r_obs_c_coding";
        } "r_obs_code";
        src -> observation.subject = refPatient "rule_observation_subject";
        src -> observation.encounter = reference(encounter) "rule_observation_encounter";
        src -> observation.status = 'final' "rule_observation_status";
        src -> observation.category = cc('http://snomed.info/sct', '17369002', 'Pregnancy Outcome Type')"r_obs_category";
        src -> observation.effective = evaluate(src, now()) "r_effective_miscarriage_date";
    } "r_observation_for_miscarriage";
}

/* Create the PNC Condition for the patients  */
group ExtractPNCCondition(source src : QuestionnaireResponse, target bundle : Bundle, source refPatient : Reference) {
    src -> bundle.entry as entry, entry.resource = create("Condition") as cnd then {
        src -> cnd.id = uuid() "r_cnd_id";
     	src -> cnd.onset = evaluate(src, now()) "r_cnd_onset_date_val";

    	src.item as item_delivery_date where(linkId = "dc861744-59eb-4569-d4fb-1e811e93a66f") then {
    	    src -> cnd.onset = create('dateTime') as dt, dt.value = evaluate(item_delivery_date, $this.answer.value.toString()) "r_cnd_onset_date_val";
    	} "r_cnd_onset_date";

     	src -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") "r_cnd_clinical_st";
        src -> cnd.verificationStatus = cc("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") "r_cnd_verif_st";
        src -> cnd.category = cc("http://terminology.hl7.org/CodeSystem/condition-category", "encounter-diagnosis",
        "Encounter Diagnosis") "r_cnd_category";
        src -> cnd.subject = refPatient "r_cnd_sub";
        src -> cnd.recordedDate = evaluate(src, now()) "r_cnd_recorded";
        src -> cnd.code = create("CodeableConcept") as ccPreg then {
             src -> ccPreg.coding = c("http://snomed.info/sct", "234234234", "PNC") "r_cnd_code_coding";
             src -> ccPreg.text = "PNC" "r_cnd_code_text";
        } "r_cnd_code";
    } "r_cnd";
}

/* Update Existing ANC Condition for the patients  */
group UpdateANCCondition(source src : QuestionnaireResponse, target bundle : Bundle, source refPatient : Reference) {
    src.item as item where(linkId = "650dd00d-c60b-4a3d-838a-128aad048277" and answer.value.exists()) then {
          src->bundle.entry as entry,
          entry.resource = create("Condition") as cnd then {
              src->cnd.id = create("id") as cnd_id then {
                  src->cnd_id.value = evaluate(item, $this.answer.value) "r_item_cnd_id_value";
              } "r_item_cnd_id";
              src -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "inactive") "r_cnd_clinical_status";
          } "r_cnd";
      } "r_item";
}

group extractPNCEncounter(source src : QuestionnaireResponse, target bundle: Bundle, source refPatient: Patient,) {
    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        src -> encounter.id = uuid() "r_en_id";
        src -> encounter.status = 'finished' "r_en_st";
        src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "Home Health") "r_en_cls";
        src -> encounter.type = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://snomed.info/sct", "77386006") as coding then {
                src -> coding.display = 'Consultation' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = 'Consultation' "r_en_typ_text";
        } "r_en_typ";
        src -> encounter.priority = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://snomed.info/sct", "17621005") as coding then {
                src -> coding.display = 'Normal' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = 'Normal' "r_en_prio_text";
        } "r_en_prio";
    	src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
        // src -> encounter.participant = automatically set by code in questionnaire view model
        src -> encounter.period = create('Period') as enPeriod then {
            src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
            src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
        } "r_en_per";
        src -> encounter.reasonCode = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://smartregsiter.org/", "pregnancy_outcome_registration") as coding then {
                src -> coding.display = 'mPower PNC Registration' "r_en_rc_cod_disp";
            } "r_en_rc_cod";
            src -> concept.text = 'mPower PNC Registration' "r_en_text";
        } "r_en_reason";
        src then extractPregnancyOutcomeObservation(src, bundle, refPatient, encounter) "r_extract_observations";
    } "r_en";
}
map "https://fhir.labs.smartregister.org/fhir/StructureMap/5590" = "mPower ANC Followup Visit"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ANCFollowupVisit(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = "collection" "r_bundle_type";
    src -> evaluate(src, $this.subject) as refPatient then
      ExtractEncounter(src, bundle) "r_bundle_entries";
}

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle) {
    src.item as has_referred where(linkId = '0418baa2-f7d4-4b8d-cba0-5718460ffb7a' and answer.value.code = 'yes') then {
        src -> bundle.entry as entry, entry.resource = create('Task') as dueTask then ExtractDueTask(src, dueTask) "r_extract_due_task";
    } "referred_check_and_extract_due_task";

    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
    	src -> encounter.id = uuid() "r_en_id";
    	src -> encounter.status = 'finished' "r_en_st";
    	src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_en_cls";
    	src -> encounter.type = create('CodeableConcept') as concept then {
    		src -> concept.coding = c("http://example.org/CodeSystem/encounter-type", "anc-contact-in-brac") as coding then {
    			src -> coding.display = 'Antenatal care contact in brac' "r_en_cod_disp";
   			} "r_en_cc_cod";
    		src -> concept.text = 'Antenatal care contact in brac' "r_en_typ_text";
    	} "r_en_typ";
    	src -> encounter.priority = create('CodeableConcept') as concept then {
    		src -> concept.coding = c("http://snomed.info/sct", "17621005") as coding then {
    			src -> coding.display = 'Normal' "r_en_cod_disp";
    		} "r_en_cc_cod";
    	src -> concept.text = 'Normal' "r_en_prio_text";
    	} "r_en_prio";
    	src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
    	// src -> encounter.participant = automatically set by code in questionnaire view model
    	src -> encounter.period = create('Period') as enPeriod then {
    		src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
    		src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
    	} "r_en_per";
    	src -> encounter.reasonCode = create('CodeableConcept') as concept then {
			src -> concept.coding = c("http://mpower-social.com/", "anc_followup_visit") as coding then {
                src -> coding.display = 'mPower ANC Followup Visit' "r_en_rc_cod_disp";
            } "r_en_rc_cod";
    		src -> concept.text = 'mPower ANC Followup Visit' "r_en_text";
    	} "r_en_reason";
    } "r_en";
}

group ExtractDueTask(source questionnaireResponse : QuestionnaireResponse, target task: Task) {

    questionnaireResponse -> create('Period') as period then {
        questionnaireResponse -> evaluate(questionnaireResponse, now()) as startDate,
                                 evaluate(questionnaireResponse, now() + '7 \'days\''.toQuantity()) as endDate
                                 then extractPeriodTime(startDate, endDate, period) "r_task_period_extra";

        questionnaireResponse -> task.executionPeriod = period "r_task_per";
    } "r_per";

    questionnaireResponse -> task.id = uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.identifier = create('Identifier') as iden, iden.value = 'followup_routine_visit', iden.use = 'secondary',
            task.status = 'ready',
            task.intent = 'plan',
            task.priority = 'routine',
            task.description = 'Referral Follow-up Visit',
            task.for = evaluate(questionnaireResponse, $this.subject),
            task.authoredOn = evaluate(questionnaireResponse, now()),
            task.requester = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.owner = evaluate(questionnaireResponse, $this.generalPractitioner.first()),
            task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/4235' "r_task_data";

    questionnaireResponse.item as refer_reason where(linkId = '3d005338-3602-408d-fbca-d429cfda7ea8' and answer.value.exists()) then {
        questionnaireResponse -> task.input = create('Task_Input') as input then {
            questionnaireResponse -> input.value = create('CodeableConcept') as taskCode then {
                questionnaireResponse -> taskCode.coding = create('Coding') as coding then {
                    questionnaireResponse -> coding.system = 'https://www.mpower-social.com/' "r_en_cod_system";
                    questionnaireResponse -> coding.code = evaluate(refer_reason, $this.answer.value.code) "r_en_cod_cod";
                    questionnaireResponse -> coding.display = evaluate(refer_reason, $this.answer.value.display) "r_en_cod_disp";
                } "r_en_cc_cod";
                questionnaireResponse -> taskCode.text = evaluate(refer_reason, answer.value.display) "r_en_text";
            } "r_task_input_cod";
       } "r_task_input";
    } "check_refer_reason";
}

group extractPeriodTime(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}
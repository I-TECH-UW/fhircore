map "https://fhir.demo.smartregister.org/fhir/StructureMap/dc-remove-patient-sm" = 'DC Remove Patient'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group removePatient(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle) {
    questionnaireResponse -> bundle.id = uuid() "rule_bundle_id";
    questionnaireResponse -> bundle.type = 'collection' "rule_bundle_type";
    questionnaireResponse -> evaluate(questionnaireResponse, $this.subject) as patientReference then extractResources(questionnaireResponse, bundle, patientReference) "r_obs";
}

group extractResources(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle, source patientReference : Reference){
    questionnaireResponse then extractEncounter(questionnaireResponse, bundle, patientReference),
        setPatientActiveAsFalse(questionnaireResponse, bundle) "r_inactive";
}

group extractEncounter(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle, source patientReference : Reference) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        questionnaireResponse -> encounter.id = uuid() "rule_en_id";
        questionnaireResponse -> encounter.status = 'finished' "rule_en_status";
        questionnaireResponse -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "rule_en_class";
        questionnaireResponse -> encounter.type = create('CodeableConcept') as concept then {
            questionnaireResponse -> concept.coding = c("https://smartregister.org/", "remove_patient") as coding then {
                questionnaireResponse -> coding.display = "Remove Patient" "rule_display";
            } "rule_en_coding";
            questionnaireResponse -> concept.text = "Remove Patient" "rule_text";
        } "rule_en_type";
        questionnaireResponse -> encounter.priority = create('CodeableConcept') as priority then {
            questionnaireResponse -> priority.coding = c("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL") as priorityCoding then {
                questionnaireResponse -> priorityCoding.display = "Elective" "r_en_cod_disp";
            } "r_en_cc_cod";
            questionnaireResponse -> priority.text = "Elective" "r_en_prio_text";
        } "rule_priority";
        questionnaireResponse.subject as subject -> encounter.subject = subject "rule_subj";
        questionnaireResponse -> encounter.period = create('Period') as period then {
            questionnaireResponse -> period.start = evaluate(questionnaireResponse, now()) "r_per_start";
            questionnaireResponse -> period.end = evaluate(questionnaireResponse, now()) "r_per_end";
        } "rule_period";
        questionnaireResponse -> encounter.reasonCode = create('CodeableConcept') as reason then {
            questionnaireResponse -> reason.text = "Remove Patient" "r_en_text";
            questionnaireResponse -> reason.coding = c("https://smartregister.org/", "remove_patient") "rule_rea_cd";
        } "rule_en_reason";

        questionnaireResponse then extractReasonForRemovalObservation(questionnaireResponse, bundle, encounter) "r_observation";
        questionnaireResponse then extractRemovePatientDueToDeathObs(questionnaireResponse, bundle, encounter, patientReference) "r_observation";
    } "rule_encounter";
}

group extractReasonForRemovalObservation(source questionnaireResponse: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    questionnaireResponse.item as answerItem where(linkId='reason-for-removal') then {
        questionnaireResponse -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
                questionnaireResponse -> observation.id = uuid() "r_observation_id";
                questionnaireResponse -> observation.status = 'final' "r_status";
                questionnaireResponse -> observation.code = create('CodeableConcept') as code then {
                    questionnaireResponse -> code.coding = c("http://ona.io/codes", "11112222", "Reason for removal") "rule_observation_c_coding";
                } "rule_observation_code";
                questionnaireResponse -> observation.value = create("CodeableConcept")as codeableConcept then {
                    questionnaireResponse -> codeableConcept.coding = evaluate(answerItem, $this.answer.value.code) "r_item_reason_for_removal_observation_value_cc_coding";
                    questionnaireResponse -> codeableConcept.text = evaluate(answerItem, $this.answer.value.display) "r_item_reason_for_removal_observation_cc_display";
                } "rule_a";
                questionnaireResponse -> observation.subject = create('Reference') as ref then {
                    questionnaireResponse -> ref.reference = evaluate(questionnaireResponse, $this.item.where(linkId = "a11ebb0d-acb3-4038-956b-293a41acb85b").answer.value) "r_item_reason_for_removal_observation_ref_ref";
                } "rule_subject";
                questionnaireResponse ->observation.effective = evaluate(questionnaireResponse, now()) "r_item_reason_for_removal_observation_eff";
                questionnaireResponse-> observation.encounter = reference(encounter) "rule_observation_encounter";
            } "r_item_reason_for_removal_observation_value";
        } "rule_observation";
}

group extractRemovePatientDueToDeathObs(source questionnaireResponse: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter, source patientReference : Reference){
    questionnaireResponse.item as answerItem where(linkId='reason-for-removal' and answer.value.code = 'died') then {
        questionnaireResponse -> bundle.entry as entry, entry.resource = create('Observation') as observation then {
            questionnaireResponse -> observation.id = uuid() "rule_observation_id";
            questionnaireResponse -> observation.subject = patientReference "rule_observation_subject";
            questionnaireResponse -> observation.encounter = reference(encounter) "rule_observation_encounter";
            questionnaireResponse -> observation.status = 'final' "rule_observation_status";
            questionnaireResponse -> observation.code = create('CodeableConcept') as code then {
                questionnaireResponse -> code.coding = create('Coding') as coding then {
                    questionnaireResponse -> coding.system = 'https://smartregister.org/' "rule_observation_coding_system";
                    questionnaireResponse -> coding.code = '419099009' "r_obs_c_coding_code";
                    questionnaireResponse -> coding.display = 'Remove Patient' "r_obs_c_coding_display";
                } "r_obs_c_coding";
            } "r_obs_code";
            questionnaireResponse -> observation.category = create('CodeableConcept') as code then {
                //death facility
                questionnaireResponse.item as questionnaireItem where(linkId='place-of-death' and answer.value.code = 'death-facility') then {
                    questionnaireResponse -> code.coding = create('Coding') as coding then {
                        questionnaireResponse -> coding.system = 'http://snomed.info/sct' "rule_observation_system";
                        questionnaireResponse -> coding.code = '876879006' "rule_observation_code";
                        questionnaireResponse -> coding.display = 'Health facility' "rule_observation_coding_display";
                    } "rule_observation_coding";
                }"rule_health_facility";
                //community centre
                questionnaireResponse.item as questionnaireItem where(linkId='place-of-death' and answer.value.code = 'community-death') then {
                    questionnaireResponse -> code.coding = create('Coding') as coding then {
                        questionnaireResponse -> coding.system = 'http://snomed.info/sct' "rule_observation_system";
                        questionnaireResponse -> coding.code = '183676005' "rule_observation_code";
                        questionnaireResponse -> coding.display = 'Community' "rule_observation_coding_display";
                    } "rule_observation_coding";
                }"rule_health_facility";
                //other place
                questionnaireResponse.item as questionnaireItem where(linkId='place-of-death' and answer.value.code = 'place-other') then {
                    questionnaireResponse -> code.coding = create('Coding') as coding then {
                        questionnaireResponse -> coding.system = 'http://snomed.info/sct' "rule_observation_system";
                        questionnaireResponse -> coding.code = '74964007' "rule_observation_code";
                        questionnaireResponse -> coding.display = 'Other' "rule_observation_coding_display";
                    } "rule_observation_coding";
                }"rule_health_facility";
            } "rule_observation_code";

            questionnaireResponse.item as item where(linkId = 'ad68508d-2bfd-400c-b3f8-4d4a01174f81') then {
                item.answer first as deathDate then {
                    deathDate.value as val -> observation.effective = create('dateTime') as dt,
                    dt.value = evaluate(val, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_effective_current_date_time";
                } "r_observation_effective";
            }"r_effective_current_date_time";
        } "r_item_reason_for_removal_observation_value";
    } "rule_observation";
}

group setPatientActiveAsFalse(source questionnaireResponse: QuestionnaireResponse, target bundle: Bundle) {
    questionnaireResponse.item as item where(linkId = "reason-for-removal") then {
        questionnaireResponse-> bundle.entry as entry, entry.resource = create("Patient") as patient then {
            questionnaireResponse-> patient.id = create("id") as patient_id then {
                questionnaireResponse-> patient_id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'a11ebb0d-acb3-4038-956b-293a41acb85b').answer.value.replaceMatches('Patient/', '').replaceMatches('/_history/.*', '')) "r_item_patient_id_patient_set_pat_id";
            }
            "r_item_patient_id_patient_create_pat_id";
            questionnaireResponse -> patient.active = false "r_item_patient_id_patient_active";

            questionnaireResponse.item as answerItem where(linkId = "reason-for-removal" and answer.value.code = 'died') then {

                answerItem -> patient.deceased = create('dateTime') as dateTime,
                    dateTime.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'date-of-death').answer.value.toString() + 'T00:00:00.00Z') "r_item_patient_id_patient_deceased_dt";
            } "r_item_patient_id_patient_deceased";
        }
        "r_item_patient_id_patient";
    }
    "r_item_patient_id";
}
map "https://fhir.demo.smartregister.org/fhir/StructureMap/dc-diabetes-screening" = "Diabetes Compass Diabetes Screening"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Consent" as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/RiskAssessment" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target

group DiabetesScreening(source src: QuestionnaireResponse, target bundle: Bundle) {
    src->bundle.id = uuid(),
    bundle.type = "collection" then
        ExtractEncounter(src, bundle) "r_bundle_data";
}

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle) {
    src ->bundle.entry as entry,
    entry.resource = create("Encounter") as encounter then {
        src->encounter.id = uuid(),
            encounter.status = "finished",
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH","home health"),
            encounter.serviceType= cc("http://terminology.hl7.org/CodeSystem/service-type", "252","Screening") "r_enc_data";
        src ->encounter.subject = evaluate(src, $this.subject) "r_enc_subject";
        src -> encounter.priority = create("CodeableConcept") as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL") as coding then {
                src -> coding.display = "Elective" "r_enc_cod_disp";
            } "r_enc_cc_cod";
            src -> concept.text = "Elective" "r_enc_prio_text";
        } "r_en_prio";
        src then ExtractConsent(src, bundle, encounter) "r_extract_cnst";
        src then ExtractObservations(src, bundle, encounter) "r_extract_obs";
    } "r_encounter";
}

group ExtractConsent(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-1") then {
        page.item as item where(linkId = "screening-consent-choice") then {
                src -> bundle.entry as entry,
                entry.resource = create("Consent") as cns then {
                    src -> cns.id = uuid(),
                    evaluate(item, $this.answer.count()) as count then {
                        src where(count > 0) then {
                            src -> cns.status = "active" "r_status_active";
                        } "r_cns_ans";
                        src where(count <= 0) then {
                            src -> cns.status = "rejected" "r_status_rejected";
                        } "r_cns_no_ans";
                    }"r_cns_eval";
                    src -> cns.scope = cc("http://hl7.org/fhir/ValueSet/consent-scope", "patient-privacy", "Privacy Consent"),
                        cns.dateTime = evaluate(src, now()) "r_date_created";
                    src ->cns.patient = create("Reference") as ref then {
                        src ->ref.reference = evaluate(src, "Patient/"+ $this.item.where(linkId="patient-id").answer.value) "r_cns_patient_ref";
                    } "r_cns_patient";
                    src -> cns.performer = evaluate(src, $this.generalPractitioner.first()) "r_cns_performer";
                    src -> cns.organization = create('Reference') as orgRef then {
                        src -> orgRef.reference = evaluate(src, 'Organization/' + $this.managingOrganization) "org";
                   } "r_cns_org";
                   src -> cns.source = create('Reference') as consentSource then {
                    src -> consentSource.reference = evaluate(src, 'QuestionnaireResponse/' + src.id) "source";
                   } "r_cns_source";
                } "r_cns_item";
        } "r_consent";
    } "r_consent_pg";
}

group ExtractObservations(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src then
    ExtractAge(src, bundle, encounter),
    ExtractGender(src, bundle, encounter),
    ExtractDietaryIntake(src, bundle, encounter),
    ExtractFamilyHistory(src, bundle, encounter),
    ExtractPhysicalActivity(src, bundle, encounter),
    ExtractWaist(src, bundle, encounter),
    ExtractWeight(src, bundle, encounter),
    ExtractHeight(src, bundle, encounter),
    ExtractBMI(src, bundle, encounter),
    ExtractRiskScore(src, bundle, encounter),
    ExtractReferralServiceRequest(src,bundle,encounter)
    "r_enc_obs";
}

group ExtractAge(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-2") then {
        page.item as item where(linkId = "age-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","424144002", "Current chronological age"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_age";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_age";
                    } "r_obs_value";
                } "r_obs_age_item";
        } "r_obs_age";
    } "r_obs_age_pg";
}

group ExtractGender(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-3") then {
        page.item as item where(linkId = "gender-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","278844005", "Gender"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_gender";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_gender";
                    } "r_obs_value";
                } "r_obs_gender_item";
        } "r_obs_gender";
    } "r_obs_gender_pg";
}

group ExtractDietaryIntake(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-4") then {
        page.item as item where(linkId = "diet-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","364395008", "Dietary intake"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "social-history"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_diet";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_diet";
                    } "r_obs_value";
                } "r_obs_diet_item";
        } "r_obs_diet";
    } "r_obs_diet_pg";
}

group ExtractFamilyHistory(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-5") then {
        page.item as item where(linkId = "family-history-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "social-history"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.code = create("CodeableConcept") as concept then {
                    src->evaluate(item, $this.answer.value.code) as famHistoryCode then {
                            src where(famHistoryCode = "1st") then {
                                src->concept.coding = c("http://snomed.info/sct","416855002") as coding then {
                                    src->coding.display = "Family history of diabetes mellitus in first degree relative" "r_obs_code_display";
                                } "r_obs_cc_coding";
                            } "r_obs_code_first";
                            src where(famHistoryCode = "2nd") then {
                                src->concept.coding = c("http://snomed.info/sct","430679000") as coding then {
                                    src->coding.display = "Family history of diabetes mellitus type 2" "r_obs_code_display";
                                } "r_obs_cc_coding";
                            } "r_obs_code_second";

                            src where(famHistoryCode = "no") then {
                                src->concept.coding = c("http://snomed.info/sct","160274005") as coding then {
                                    src->coding.display = "No family history diabetes" "r_obs_code_display";
                                } "r_obs_cc_coding";
                            } "r_obs_code_no";
                        }"r_obs_cc_code";
                        src->concept.text = evaluate(item, $this.answer.value.display) "r_obs_code_fam_history";
                    }"r_obs_code";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_fam_history";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_fam_history";
                    } "r_obs_value";
                } "r_obs_fam_history";
        } "r_obs_fam_history_item";
    } "r_obs_fam_history_pg";
}

group ExtractPhysicalActivity(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-6") then {
        page.item as item where(linkId = "physical-activity-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","68130003", "Physical activity"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_physical_activity";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_physical_activity";
                    } "r_obs_value";
                } "r_obs_physical_activity_item";
        } "r_obs_physical_activity";
    } "r_obs_physical_activity_pg";
}

group ExtractWaist(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-7") then {
        page.item as item where(linkId = "waist-choice" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","445396007", "Measurement of circumference of waist"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src->obs.value = create("CodeableConcept") as codeableConcept then {
                        src->codeableConcept.text = evaluate(item, $this.answer.value.display) "r_obs_value_text_waist";
                        src->codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_obs_value_c_waist";
                    } "r_obs_value";
                } "r_obs_waist_item";
        } "r_obs_waist";
    } "r_obs_waist_pg";
}

group ExtractWeight(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-7") then {
        page.item as item where(linkId = "weight-bmi" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","363808001", "Body weight measure"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src -> obs.value =  evaluate(item, $this.answer.value.toString()) "r_obs_value";
                } "r_obs_weight_item";
        } "r_obs_weight";
    } "r_obs_weight_pg";
}

group ExtractHeight(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-7") then {
        page.item as item where(linkId = "height-bmi" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","50373000", "Body height measure"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src->obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src -> obs.value =  evaluate(item, $this.answer.value.toString()) "r_obs_value";
                } "r_obs_height_item";
        } "r_obs_height";
    } "r_obs_height_pg";
}

group ExtractBMI(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-7") then {
        page.item as item where(linkId = "bmi" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("Observation") as obs then {
                    src -> obs.id = uuid(),
                        obs.status = "final",
                        obs.code = cc("http://snomed.info/sct","162859006", "Body mass index"),
                        obs.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', "vital-signs"),
                        obs.encounter = reference(encounter),
                        obs.effective = evaluate(src, now()) "r_date_of_measure";
                    src -> obs.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src -> obs.value =  evaluate(item, $this.answer.value.toString()) "r_obs_value";
                } "r_obs_bmi_item";
        } "r_obs_bmi";
    } "r_obs_bmi_pg";
}

group ExtractRiskScore(source src : QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as page where(linkId = "page-8") then {
        page.item as item where(linkId = "score-calculations" and answer.count() > 0) then {
                src -> bundle.entry as entry,
                entry.resource = create("RiskAssessment") as rsk then {
                    src -> rsk.id = uuid(),
                        rsk.status = "preliminary",
                        rsk.code = cc("http://snomed.info/sct","772788006", "Assessment of risk of type 2 diabetes mellitus"),
                        rsk.encounter = reference(encounter),
                        rsk.subject = evaluate(src, $this.subject) "r_obs_subject";
                    src -> rsk.method = create("CodeableConcept") as codeableConcept then {
                        src -> codeableConcept.coding = c("http://smartregister.org", "draft-algorithm-risk-method", "Draft Algorithm Risk Calculation Method") "r_rsk_method_coding";
                    } "r_rsk_method";
                    src -> rsk.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_performer";
                    src -> rsk.prediction as riskPrediction then {
                        src->riskPrediction.qualitativeRisk = create("CodeableConcept") as concept then {
                                src->evaluate(item, $this.answer.value) as riskScore then {
                                    src where(riskScore < 16) then {
                                        src->concept.coding = c("http://terminology.hl7.org/CodeSystem/risk-probability","low") as coding then {
                                            src->coding.display = "Low likelihood" "r_rsk_code_display";
                                        } "r_rsk_cc_coding";
                                        src->concept.text = "Low" "r_rsk_code_qualitative";
                                    } "r_rsk_code_low";
                                    src where(riskScore >= 16) then {
                                        src->concept.coding = c("http://terminology.hl7.org/CodeSystem/risk-probability","high") as coding then {
                                            src->coding.display = "High likelihood" "r_rsk_code_display";
                                        } "r_rsk_cc_coding";
                                        src->concept.text = "High" "r_rsk_code_qualitative";
                                    } "r_rsk_code_high";
                            } "r_rsk_score";
                        } "r_rsk_qualitative";
                    } "r_rsk_prediction";
                } "r_rsk_assessment";
        } "r_rsk_score_item";
    } "r_rsk_pg";
}

group ExtractReferralServiceRequest(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as page where(linkId = "page-8") then {
        page.item as item where(linkId="hlc-referred" and answer.count() > 0) then {
            src -> bundle.entry as entry, entry.resource = create("ServiceRequest") as sRequest then {
                src -> sRequest.id = uuid() "r_sRequest_id";
                src ->sRequest.status = 'active' "r_sRequest_status";
                src -> sRequest.intent = "order" "r_sRequest_onset_date_val";
                src -> sRequest.priority= "urgent" "r_sRequest_onset_date_val";
                src -> sRequest.encounter = reference(encounter) "r_sRequest_enc";
                src -> sRequest.category = cc("http://snomed.info/sct", "44383000", "Patient referral for consultation") "r_sRequest_category";
                src -> sRequest.subject = evaluate(src, $this.subject) "r_obs_subject";
                src -> sRequest.code = create("CodeableConcept") as ccProc then {
                    src -> ccProc.coding = c("http://snomed.info/sct", "44383000", "Patient referral for consultation") as coding,
                    coding.display = 'Patient referral for consultation' "r_sRequest_code_coding";
                    src -> ccProc.text = "Patient referral for consultation" "r_sRequest_code_text";
                } "r_sRequest_code";
            } "r_sRequest";
        } "r_filter";
    } "r_rsk_pg";
}
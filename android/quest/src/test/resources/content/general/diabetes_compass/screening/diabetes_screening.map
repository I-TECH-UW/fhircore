map "https://fhir.demo.smartregister.org/fhir/StructureMap/dc-patient-registration" = 'Patient Registration'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" as target


group ClientRegistration(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid() "rule_bundle_id";
    src -> bundle.type = 'collection' "rule_bundle_type";
    src -> bundle.entry as entry, entry.resource = create('Patient') as patient then
        ExtractPatient(src, patient, bundle), ExtractEncounter(src, bundle) "rule_bundle_entries";
}

group ExtractPatient(source src : QuestionnaireResponse, target patient : Patient, target bundle : Bundle) {
    src -> patient.id = uuid() "rule_patient_id_generation";

    src -> patient.identifier = create('Identifier') as patientIdentifierOpenSRPId then {
        src -> patientIdentifierOpenSRPId.value = evaluate(src, $this.item.where(linkId = 'phn').answer.value)
        "rule_patient_identifier_opensrp_id_value";
        src -> patientIdentifierOpenSRPId.use = "official" "rule_patient_identifier_opensrp_id_use";
        src -> patientIdentifierOpenSRPId.period = create('Period') as period, period.start = evaluate(src, $this.authored) "rule_patient_identifier_period";
    }  "rule_patient_identifier_opensrp";

    src -> patient.identifier = create('Identifier') as patientIdentifierNationalId then {
        src -> patientIdentifierNationalId.value = evaluate(src, $this.item.where(linkId = 'national-identity-number').answer.value)
        "rule_patient_identifier_national_id_value";
        src -> patientIdentifierNationalId.use = "usual" "rule_patient_identifier_national_id_use";
        src -> patientIdentifierNationalId.period = create('Period') as period, period.start = evaluate(src, $this.authored) "rule_patient_identifier_period";
    } "rule_patient_identifier_national_id";

    src -> patient.name = create('HumanName') as patientName then {
        src -> patientName.given = evaluate(src, $this.item.where(linkId = 'reporting-name').answer.value) "rule_patient_reporting_name";
        src -> patientName.text = evaluate(src, $this.item.where(linkId = 'legal-registered-name').answer.value) "rule_patient_legal_name";
        src -> patientName.use = 'official' "rule_patient_name_use";
    } "rule_patient_name";

    src -> patient.identifier = create('Identifier') as patientIdentifier then {
        src -> patientIdentifier.value = uuid() "rule_patient_identifier_value";
        src -> patientIdentifier.use = "secondary" "rule_patient_identifier_use";
        src -> patientIdentifier.period = create('Period') as period, period.start = evaluate(src, $this.authored) "rule_patient_identifier_period";
    } "rule_patient_identifier";

    src -> patient.gender = evaluate(src, $this.item.where(linkId = 'gender').answer.value.code) "rule_patient_gender";

    src.item as patient_dob where(linkId = 'date-of-birth') then {
        patient_dob.answer first as patientBirthDateAnswer then {
                patientBirthDateAnswer.value as val -> patient.birthDate = val "rule_patient_dob_answer";
        } "rule__first_patient_dob";
    } "rule_patient_dob";

    src.item as patient_age where(linkId = 'age' and answer.value > 0) ->
    patient.birthDate = evaluate(patient_age, today() - (($this.answer.value * 365.5).toString() + " days").toQuantity()) "rule_patient_age";

    src -> patient.active = true "rule_patient_active";

    src -> patient.telecom = create('ContactPoint') as patientTelecom then {
        src -> patientTelecom.value = evaluate(src, $this.item.where(linkId ='contact-details').answer.value) "rule_patient_contact_details";
        src -> patientTelecom.use = "mobile" "rule_patient_telecom_use";
    } "rule_patient_concact";
 }

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        src -> encounter.id = uuid() "r_en_id";
        src -> encounter.status = 'finished' "r_en_st";
        src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "Home Health") "r_en_cls";
        src -> encounter.type = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://snomed.info/sct", "184047000") as coding then {
                src -> coding.display = 'Patient registration' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = '	Patient registration' "r_en_typ_text";
        } "r_en_typ";
        src -> encounter.priority = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://snomed.info/sct", "17621005") as coding then {
                src -> coding.display = 'Normal' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = 'Normal' "r_en_prio_text";
        } "r_en_prio";
    	src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
        // src -> encounter.participant = automatically set by code in questionnaire view model
        src -> encounter.period = create('Period') as enPeriod then {
            src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
            src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
        } "r_en_per";
        src -> encounter.reasonCode = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://smartregsiter.org/", "client_registration") as coding then {
                src -> coding.display = 'Client Registration' "r_en_rc_cod_disp";
            } "r_en_rc_cod";
            src -> concept.text = ' Client Registration' "r_en_text";
        } "r_en_reason";
    } "r_en";
}
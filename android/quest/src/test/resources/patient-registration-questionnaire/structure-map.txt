map "https://fhir.labs.smartregister.org/fhir/StructureMap/63752b18-9f0e-48a7-9a21-d3714be6309a" = "eCBIS Disease Followup"
uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target
group eCBISNewPregnancyRegistrationAndVisit(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(definition, $this.timing) as timing,
            evaluate(timing, $this.repeat) as repeat,
            evaluate(subject, today()) as dueDate, evaluate(subject, today() + ((repeat.duration.toString().toInteger()).toString() + ' \'months\'').toQuantity()) as maxDate,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse
            then ExtractTasks(dueDate, maxDate, repeat, subject, timing) "r_careplan";
           // then ExtractCarePlan(subject, definition, questionnaireResponse, tgt), ExtractActivityDetail(subject, definition, questionnaireResponse, tgt) "r_careplan";
}
group ExtractTasks(
    source dueDate: DateType,
    source maxDate: DateType,
    source repeat: TimingRepeat,
    source subject : Patient,
    target timing: Timing){
    // today + total * gap

    subject ->  create('Period') as period,
                create('Task') as task then {
        subject then ExtractPeriod(dueDate, maxDate, period) "r_task_period_extr";
        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'Disease Follow Up Task',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "r_task_data";
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/e14b5743-0a06-4ab5-aaee-ac158d4cb64f' "r_task_reason_ref";
        subject -> activity.outcomeReference = reference(task) "r_cp_task_ref";
        subject -> timing.event = evaluate(period, $this.start) "r_activity_timing";
        repeat -> evaluate(period, $this.start + (repeat.period.toString() + ' \'months\'').toQuantity()) as nextDueDate
                          then ExtractTasks(nextDueDate, maxDate, repeat, subject, timing) "r_task_repeat";
    } "r_cp_acti_outcome";
}
group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";
    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_end";
}
group ExtractDiseaseCode(source src: QuestionnaireResponse, target det: ActivityDetail) {
    src.item as dis_item where(src.descendants().where(linkId='f8fdb1c1-fff2-49f9-8f93-8a4c1f55c9ce')) then {
        dis_item.answer as hiv where(value.code='hiv') -> evaluate(hiv, value) as hivcode then ExtractCodeableConcept(src, hivcode, det) "r_det_c";
        dis_item.answer as tb where(value.code='tb') -> evaluate(tb, value) as tbcode then ExtractCodeableConcept(src, tbcode, det) "r_det_c";
        dis_item.answer as me where(value.code='mental-health') -> evaluate(me, value) as mecode then ExtractCodeableConcept(src, mecode, det) "r_det_c";

       item_bio.item as item_iden where(linkId = 'PR-identifier-info') -> patient.identifier = create('Identifier') as patientIdent then {
         src -> patientIdent.value = evaluate(item_iden, $this.item.where(linkId = 'PR-identifier-nid').answer.value) "r_p_iden_val";
       } "r_p_iden";

       src -> patient.gender = evaluate(item_bio, $this.item.where(linkId = 'PR-gender').answer.value.code) "r_p_gender";

       item_bio.item as item_dob where(linkId = 'PR-birth-date' and answer.count() > 0) -> patient.birthDate = evaluate(item_dob, $this.answer.value) "r_p_dob";
       item_bio.item as item_age where(linkId = 'PR-age' and answer.count() > 0) -> patient.birthDate = evaluate(item_age, today() - ($this.answer.value.toString() + " 'years'").toQuantity()) "r_p_age";

       item_bio.item as item_marital where(linkId = 'PR-marital-status') -> patient.maritalStatus = create('CodeableConcept') as mcc then {
          src -> mcc.coding = evaluate(item_marital, $this.answer.value) "r_p_martial_cod";
       } "r_p_marital";

       item_bio.item as item_tele where (linkId = 'PR-telecom') -> patient.telecom = create('ContactPoint') as patientContact then {
          src -> patientContact.value = evaluate(item_tele, $this.item.where(linkId = 'PR-telecom-value').answer.value) "r_p_tel_num";
          src -> patientContact.system = "phone" "r_p_tel_sys";
       } "r_p_tel";

       item_bio.item as item_addr where (linkId = 'PR-address') -> patient.address = create('Address') as patientAddress then {
          src -> patientAddress.city = evaluate(item_addr, $this.item.where(linkId = 'PR-address-city').answer.value) "r_p_add_cty";
          src -> patientAddress.country = evaluate(item_addr, $this.item.where(linkId = 'PR-address-country').answer.value) "r_p_add_cntry";
          src -> patientAddress.use = "home" "r_p_add_use";
          src -> patientAddress.type = "physical" "r_p_add_typ";
       } "r_p_addr";

       item_bio.item as item_eth where (linkId = 'PR-ethnicity-group') -> patient.extension = create('Extension') as patientEthnicity then {
         src -> patientEthnicity.url = evaluate(item_eth, $this.item.where(linkId = 'PR-ethnicity-authority').answer.value) "r_p_eth_url";
         src -> patientEthnicity.value = evaluate(item_eth, $this.item.where(linkId = 'PR-ethnicity').answer.value) "r_p_eth_val";
       } "r_p_eth";

       item_bio.item as item_occ where (linkId = 'PR-occupation-group') -> patient.extension = create('Extension') as patientOccupation then {
        src -> patientOccupation.url = evaluate(item_occ, $this.item.where(linkId = 'PR-occupation-authority').answer.value) "r_p_occ_url";
        src -> patientOccupation.value = evaluate(item_occ, $this.item.where(linkId = 'PR-occupation').answer.value) "r_p_occ_val";
       } "r_p_occ";

       src -> patient.active = evaluate(item_bio, $this.item.where(linkId = 'PR-active').answer.value) "r_p_act";
    };
}

group ExtractPregnancyCondition(source src : QuestionnaireResponse, target bundle : Bundle, source patient : Patient) {
    src.item as item_bio where(linkId = 'bio') then {
        item_bio.item as item_preg where(linkId = 'is_pregnant' and answer.count() > 0 and answer.value.code = '77386006') then {
        	src -> bundle.entry as entry, entry.resource = create('Condition') as cnd then {
    	    	src -> cnd.id = uuid() "r_c_id";
    	    	src -> cnd.recordedDate = evaluate(src, now()) "r_c_rec_date";
    	    	src -> cnd.clinicalStatus = create('CodeableConcept') as concept then {
                    src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") as coding then {
                        src -> coding.display = 'Active' "r_c_ct_cod_disp";
                    } "r_c_ct_coding";
                    src -> concept.text = "Active" "r_c_ct_text";
                } "r_c_ct";
    	    	src -> cnd.verificationStatus = create('CodeableConcept') as concept then {
                    src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") as coding then {
                        src -> coding.display = 'Confirmed' "r_c_vs_cod_disp";
                    } "r_c_vs_coding";
                    src -> concept.text = "Confirmed" "r_c_vs_text";
                } "r_c_vs";
    	    	src -> cnd.subject = reference(patient) "r_c_sub";
    	    	src -> cnd.code = create('CodeableConcept') as ccPreg then {
                  src -> ccPreg.coding = evaluate(item_preg, $this.answer.value) "r_c_cod_cod";
                  src -> ccPreg.text = "Pregnant" "r_c_cod_text";
               } "r_c_code";
        	} "r_c";
    	} "r_c_preg";
    };
}
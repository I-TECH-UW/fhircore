"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[950],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||o;return r?n.createElement(u,i(i({ref:t},c),{},{components:r})):n.createElement(u,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8132:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},i=void 0,l={unversionedId:"report/cql-to-library-conversion",id:"report/cql-to-library-conversion",title:"cql-to-library-conversion",description:"CQL Logic/Decision Library",source:"@site/docs/report/cql-to-library-conversion.mdx",sourceDirName:"report",slug:"/report/cql-to-library-conversion",permalink:"/report/cql-to-library-conversion",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/report/cql-to-library-conversion.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Platform Components",permalink:"/getting-started/platform-components"},next:{title:"Writing FHIR",permalink:"/writing-fhir/"}},s={},p=[{value:"CQL Logic/Decision Library",id:"cql-logicdecision-library",level:2},{value:"Other possible but not recommended ways to get the translated elm+json",id:"other-possible-but-not-recommended-ways-to-get-the-translated-elmjson",level:5}],c={toc:p};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cql-logicdecision-library"},"CQL Logic/Decision Library"),(0,a.kt)("p",null,"The Clinical Quality Language (CQL) Specification provides a way to define, data querying, processing and logical expressions in a simplified and user-friendly way. ",(0,a.kt)("a",{parentName:"p",href:"https://cql.hl7.org/01-introduction.html"},"Here")," is a detailed guide on CQL. Some example CQL scripts can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhir-resources/tree/main/ecbis/measure_cql"},"here"),"."),(0,a.kt)("p",null,"Since CQL itself is a user-friendly script rather than a parseable configuration or program, it needs a ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"XML")," form that can be lexically parsed and understood by the parser. Thus, it is transformed into a JSON form called Expression Logical Model(ELM) aka ",(0,a.kt)("inlineCode",{parentName:"p"},"json+elm"),". An XML form ",(0,a.kt)("inlineCode",{parentName:"p"},"xml+elm")," is also used. In most cases, we shall be using ",(0,a.kt)("inlineCode",{parentName:"p"},"json+elm")," for parsing FHIR Core libraries. "),(0,a.kt)("p",null,"The translated ",(0,a.kt)("inlineCode",{parentName:"p"},"elm")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cql")," is then added to FHIR ",(0,a.kt)("a",{parentName:"p",href:"http://hl7.org/fhir/R4/library.html"},"Library")," resource as Base64 encoded data to allow the code to get the calculation for each variable and be able to be used by FHIR compatible software."),(0,a.kt)("p",null,"Some resources to get details on CQL writing are below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CQL brief authoring guide ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/02-authorsguide.html"},"https://cql.hl7.org/02-authorsguide.html")),(0,a.kt)("li",{parentName:"ul"},"CQL operators and functions ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/04-logicalspecification.html"},"https://cql.hl7.org/04-logicalspecification.html")," and ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/09-b-cqlreference.html"},"https://cql.hl7.org/09-b-cqlreference.html")),(0,a.kt)("li",{parentName:"ul"},"Fhirpath mapping in CQL ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/16-i-fhirpathtranslation.html"},"https://cql.hl7.org/16-i-fhirpathtranslation.html")),(0,a.kt)("li",{parentName:"ul"},"Examples ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/15-h-timeintervalcalculations.html"},"Time Interval")," and ",(0,a.kt)("a",{parentName:"li",href:"https://cql.hl7.org/03-developersguide.html#conditional-expressions"},"Detail on Queries")),(0,a.kt)("li",{parentName:"ul"},"CQL Sandbox is ","[here]","(",(0,a.kt)("a",{parentName:"li",href:"https://sandbox.cqlab.io/"},"https://sandbox.cqlab.io/")," CQL sandbox)"),(0,a.kt)("li",{parentName:"ul"},"CQL android editor app is ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Path-Check/cql-editor-app/"},"here"))),(0,a.kt)("p",null,"Here is a working example of CQL for a ",(0,a.kt)("a",{parentName:"p",href:"http://hl7.org/fhir/measure.html"},"Measure")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'library HOUSEHOLDIND01 version \'1\'\n\nusing FHIR version \'4.0.1\'\n\ninclude "FHIRHelpers" version \'4.0.1\' called FHIRHelpers\ninclude "COMMON" version \'1\' called COMMON\n\nparameter "Measurement Period" Interval<DateTime>\n\ncontext Patient\n\n// to ensure that Measure Period with a closed boundary can be handled\ndefine "Filter Period": Interval("Measurement Period".low - 1 day , "Measurement Period".high + 1 day)\n\ndefine "All Groups": [Group] G\n    where G.type = \'person\'\n    and First(G.identifier).period.start during "Filter Period"\n\ndefine "All Group Members": flatten("All Groups" G return (G.member M return M.entity))\n\ndefine "Group": "All Groups" G\n    return G.id\n\ndefine "Group Member": "All Group Members" G\n    where COMMON."IdPart"(Patient.id) = Split(G.reference, \'/\')[1]\n\ndefine "Patients": {Patient}\n\ndefine "Males": Patient.gender=\'male\'\ndefine "Females": Patient.gender=\'female\'\n\ndefine "Age": CalculateAgeInYearsAt(Patient.birthDate, ToDate("Measurement Period".high))\n\ndefine "Age Stratifier":\n  case\n    when "Age" < 1 then \'P0Y\'\n    when "Age" in Interval[1,5] then \'P1-5Y\'\n    when "Age" in Interval[6, 14] then \'P6-14Y\'\n    when "Age" in Interval[15, 49] then \'P15-49Y\'\n    when "Age" >= 50 then \'P50Y\'\n    else \'Unspecified\'\n  end\n')),(0,a.kt)("p",null,"The variables in CQL can be referenced into a ",(0,a.kt)("a",{parentName:"p",href:"http://hl7.org/fhir/measure.html"},"Measure")," and/or ",(0,a.kt)("a",{parentName:"p",href:"http://hl7.org/fhir/plandefinition.html"},"PlanDefinition")," after adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"Library")," containing CQL as referenced Library."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Android FHIR SDK CQL Builder")),(0,a.kt)("p",null,"SDK workflow testing module has ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/android-fhir/blob/master/workflow-testing/src/main/java/com/google/android/fhir/workflow/testing/CqlBuilder.kt"},"com.google.android.fhir.workflow.testing.CqlBuilder")," which can do translation from a ",(0,a.kt)("inlineCode",{parentName:"p"},"CQL")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"Library")," resource. This automatically does the ",(0,a.kt)("inlineCode",{parentName:"p"},"elm")," conversion for you internally. "),(0,a.kt)("p",null,"An example usage can be seen in tests found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/android-fhir/blob/master/workflow/src/test/java/com/google/android/fhir/workflow/FhirOperatorTest.kt#L150"},"here")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val library = CqlBuilder.compileAndBuild(cqlScriptInputStream)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"FHIR Core CQL Testing Module")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhir-resources/blob/main/fhircore-testing"},"fhir-resources")," repository has a testing module which allows to not only get the complete Library resource to directly save to the server but also allows to test the output and make changes on the fly. Check the cucumber tests ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhir-resources/blob/main/fhircore-testing/fhircore-tests/src/androidTest/resources/measure-report/household-members.feature"},"Feature File"),", the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhir-resources/blob/main/fhircore-testing/fhircore-tests/src/androidTest/kotlin/com/fhircore/resources/testing/measure/HouseholdMembersMeasureTest.kt#L28"},"Test Code File")," and the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhir-resources/blob/main/fhircore-testing/fhircore-tests/src/androidTest/kotlin/com/fhircore/resources/testing/CqlUtils.kt"},"Convertor Util Method")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"FHIR Core Tooling Library")),(0,a.kt)("p",null,"FHIR Core tooling library can also be used to get a Library by running commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fct convert -t cql -i /some/path/Patient-1.0.0.cql\n")),(0,a.kt)("p",null,"Details on the tool can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/opensrp/fhircore-tooling#converting-library-cql-to-json"},"here")),(0,a.kt)("h5",{id:"other-possible-but-not-recommended-ways-to-get-the-translated-elmjson"},"Other possible but not recommended ways to get the translated elm+json"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CQL to ELM REST Translator")),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cqframework/cql-translation-service/blob/master/README.md"},"elm REST app")," that can be used to run elm microservice and convert CQL via a REST API."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CQL to ELM JAVA Translator")),(0,a.kt)("p",null,"Her is an ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/READM.md"},"elm java app")," that can be used as an elm translator on related files and get an output. Instructions can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cqframework/cql-execution#to-execute-your-cql"},"here")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note")," : The above approaches output a ",(0,a.kt)("inlineCode",{parentName:"p"},"json-elm")," which then needs to be Base64 decoded and copied to the ",(0,a.kt)("a",{parentName:"p",href:"http://hl7.org/fhir/R4/library.html"},"Library")," content as Attachment."))}h.isMDXComponent=!0}}]);
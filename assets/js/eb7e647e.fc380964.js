"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||s[m]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"Profile"},o="Profile configuration",l={unversionedId:"android-app/configurations/user-interface/profile-config",id:"android-app/configurations/user-interface/profile-config",title:"Profile",description:"These configurations are used to control the content of the profile screen as well as how to render the profile UI. Typically for every register in application there is a corresponding profile. Technically the same implemention is used for all profiles, however the content configured.",source:"@site/docs/android-app/configurations/user-interface/profile-config.mdx",sourceDirName:"android-app/configurations/user-interface",slug:"/android-app/configurations/user-interface/profile-config",permalink:"/android-app/configurations/user-interface/profile-config",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/android-app/configurations/user-interface/profile-config.mdx",tags:[],version:"current",frontMatter:{title:"Profile"},sidebar:"defaultSidebar",previous:{title:"Navigation",permalink:"/android-app/configurations/user-interface/navigation-config"},next:{title:"Register",permalink:"/android-app/configurations/user-interface/register-config"}},p={},c=[{value:"Working with dynamic data queries",id:"working-with-dynamic-data-queries",level:3},{value:"Config properties",id:"config-properties",level:2},{value:"Dynamic data pass between Profiles and registers",id:"dynamic-data-pass-between-profiles-and-registers",level:2},{value:"Practitioner LAUNCH_PROFILE",id:"practitioner-launch_profile",level:3},{value:"Sample JSON",id:"sample-json",level:4},{value:"Sample JSON",id:"sample-json-1",level:4},{value:"Household_config.json",id:"household_configjson",level:3},{value:"Sample JSON",id:"sample-json-2",level:4},{value:"Dynamic data pass between profiles config properties",id:"dynamic-data-pass-between-profiles-config-properties",level:2}],d={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"profile-configuration"},"Profile configuration"),(0,a.kt)("p",null,"These configurations are used to control the content of the profile screen as well as how to render the profile UI. Typically for every register in application there is a corresponding profile. Technically the same implemention is used for all profiles, however the content configured."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For every register in the application there should at least be one profile configuration. Similar registers can re-use the same profile configuration.")),(0,a.kt)("h3",{id:"working-with-dynamic-data-queries"},"Working with dynamic data queries"),(0,a.kt)("p",null,"Assume you would like to filter resource data based on a criteria that needs computation before application. e.g show patients who are under 5 years or over 18 below, then this is the config to use.\nBefore you use this rule on a dataQuery, you need  to execute it first. The rules are executed within a ",(0,a.kt)("inlineCode",{parentName:"p"},"configRules")," block which follows rules engine standard and default priority of 1 which can be change based on requirement.\nBelow is a JSON config that shows how to execute rules.Refer to working with rules section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n "appId": "appId",\n  "configType": "register",\n  "id": "childRegister",\n  "configRules": [\n    {\n      "name": "under5",\n      "condition": "true",\n      "actions": [\n        "data.put(\'under5\', dateService.addOrSubtractYearFromCurrentDate(5,\'-\'))"\n      ]\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"Below is a sample dataQuery config to filter register data by configRules"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"fhirResource": {\n    "baseResource": {\n      "resource": "Patient",\n      "dataQueries": [\n        {\n          "paramName": "birthdate",\n          "filterCriteria": [\n            {\n              "dataType": "DATE",\n              "computedRule": "under5",\n              "prefix": "GREATERTHAN_OR_EQUALS"\n            }\n          ]\n        }\n      ]\n    }\n    }\n')),(0,a.kt)("h2",{id:"config-properties"},"Config properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"appId"),(0,a.kt)("td",{parentName:"tr",align:null},"Unique identifier for the application"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"configType"),(0,a.kt)("td",{parentName:"tr",align:null},"Type of configuration"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"profile"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"computedRules"),(0,a.kt)("td",{parentName:"tr",align:null},"A block that defines the rules to execute"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"baseResource"),(0,a.kt)("td",{parentName:"tr",align:null},"base resource to load data from"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"paramName"),(0,a.kt)("td",{parentName:"tr",align:null},"dataQuery unique identifier"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filterCriteria"),(0,a.kt)("td",{parentName:"tr",align:null},"a list of logic to be executed"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filterCriteria: dataType"),(0,a.kt)("td",{parentName:"tr",align:null},"dataType of the filter param"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filterCriteria: computedRule"),(0,a.kt)("td",{parentName:"tr",align:null},"key that will hold dynamic value after computation"),(0,a.kt)("td",{parentName:"tr",align:"center"},"No but recommended"),(0,a.kt)("td",{parentName:"tr",align:"center"},"app defaults to using value/valueDate/valueDateTime")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filterCriteria: prefix"),(0,a.kt)("td",{parentName:"tr",align:null},"criteria to use"),(0,a.kt)("td",{parentName:"tr",align:"center"},"No"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")))),(0,a.kt)("h2",{id:"dynamic-data-pass-between-profiles-and-registers"},"Dynamic data pass between Profiles and registers"),(0,a.kt)("p",null,"For you to pass data between profiles  you can make use of ",(0,a.kt)("strong",{parentName:"p"},"action config params")," which are executed when ",(0,a.kt)("strong",{parentName:"p"},"LAUNCH_PROFILE")," is invoked\nData extraction happens during rules execution and is persisted in computedValuesMap which is later used to interpolated values annotated with @value\nFor example, assume the LAUNCH_PROFILE onClick function of practitioner_profile_config takes you to household_profile screen and you would like pass send practitionerId from practitioner_profile_config to household_profile, define it as described below"),(0,a.kt)("h3",{id:"practitioner-launch_profile"},"Practitioner LAUNCH_PROFILE"),(0,a.kt)("h4",{id:"sample-json"},"Sample JSON"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Write rules to extract the data you need.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"rules":[\n     {\n      "name": "practitionerId",\n      "condition": "true",\n      "actions": [\n        "data.put(\'practitionerId\', fhirPath.extractValue(Practitioner, \'Practitioner.id.replace(\\"Practitioner/\\",\\"\\")\').split(\\"/\\").get(0))"\n      ]\n    }\n  ]\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"add your params at ",(0,a.kt)("strong",{parentName:"li"},"LAUNCH_REGISTER")," section of practition_register_config.json")),(0,a.kt)("h4",{id:"sample-json-1"},"Sample JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'            "actions": [\n              {\n                "trigger": "ON_CLICK",\n                "workflow": "LAUNCH_PROFILE",\n                "id": "practitionerProfile",\n                "params": [\n                  {\n                    "paramType": "PARAMDATA",\n                    "key": "practitionerId",\n                    "value": "@{practitionerId}"\n                  }\n                ]\n              }\n            ]\n')),(0,a.kt)("h3",{id:"household_configjson"},"Household_config.json"),(0,a.kt)("p",null,"A dataquery config to filter by practitionerId. For more info refer to dataquery section"),(0,a.kt)("h4",{id:"sample-json-2"},"Sample JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'      {\n          "id": "householdQueryPractitionerId",\n          "filterType": "TOKEN",\n          "key": "_tag",\n          "valueType": "CODING",\n          "valueCoding": {\n            "system": "https://smartregister.org/",\n            "code": "@{practitionerId}"\n          }\n        }\n')),(0,a.kt)("h2",{id:"dynamic-data-pass-between-profiles-config-properties"},"Dynamic data pass between profiles config properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rules name"),(0,a.kt)("td",{parentName:"tr",align:null},"Unique identifier for the rules"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"empty string")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"condition"),(0,a.kt)("td",{parentName:"tr",align:null},"specification of execution"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"actions"),(0,a.kt)("td",{parentName:"tr",align:null},"an array of the rule logic with a fhirPathExpression"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"trigger"),(0,a.kt)("td",{parentName:"tr",align:null},"application workflow action"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no default")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"workflow"),(0,a.kt)("td",{parentName:"tr",align:null},"An application event that can trigger a workflow"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"params"),(0,a.kt)("td",{parentName:"tr",align:null},"An array of actionParameters to pass to another profile"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no"),(0,a.kt)("td",{parentName:"tr",align:"center"},"emptyArray")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"paramType"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType to use e.g PREPOPULATE OR PARAMDATA"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType unique key if defined but not tag is given"),(0,a.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"application throws exception")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType corresponding key's value"),(0,a.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"application throws exception")))))}s.isMDXComponent=!0}}]);
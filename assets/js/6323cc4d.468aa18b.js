"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[353],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=p(n),g=r,u=c["".concat(s,".").concat(g)]||c[g]||m[g]||i;return n?a.createElement(u,l(l({ref:e},d),{},{components:n})):a.createElement(u,l({ref:e},d))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5415:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Widget configurations",o={unversionedId:"configurations/user-interface/widget-config",id:"configurations/user-interface/widget-config",title:"Widget configurations",description:"Configurations used to configure widgets. FHIR Core uses widgets to render views. Examples are rows, columns, cards, and buttons.",source:"@site/docs/configurations/user-interface/widget-config.mdx",sourceDirName:"configurations/user-interface",slug:"/configurations/user-interface/widget-config",permalink:"/configurations/user-interface/widget-config",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/configurations/user-interface/widget-config.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Register",permalink:"/configurations/user-interface/register-config"},next:{title:"Working with rules",permalink:"/configurations/working-with-rules"}},s={},p=[{value:"Flex alignment widgets",id:"flex-alignment-widgets",level:2},{value:"Display resources inside another list",id:"display-resources-inside-another-list",level:2},{value:"Config properties of list resources using the above json config",id:"config-properties-of-list-resources-using-the-above-json-config",level:2},{value:"Config properties of a list widget",id:"config-properties-of-a-list-widget",level:2},{value:"How to use COMPOUND_TEXT",id:"how-to-use-compound_text",level:2},{value:"Config properties of COMPOUND_TEXT",id:"config-properties-of-compound_text",level:2},{value:"SERVICE_CARD widgets",id:"service_card-widgets",level:2},{value:"Config properties of SERVICE_CARD",id:"config-properties-of-service_card",level:2},{value:"COLUMN widgets",id:"column-widgets",level:2},{value:"Config properties of COLUMN",id:"config-properties-of-column",level:2}],d={toc:p};function m(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"widget-configurations"},"Widget configurations"),(0,r.kt)("p",null,"Configurations used to configure widgets. FHIR Core uses widgets to render views. Examples are rows, columns, cards, and buttons."),(0,r.kt)("h2",{id:"flex-alignment-widgets"},"Flex alignment widgets"),(0,r.kt)("p",null,"To display items in flexRow below sample JSON config works fine. Replace ",(0,r.kt)("strong",{parentName:"p"},"COMPOUND_TEXT")," with your preferred widget component. Please note, the below json borrows from ",(0,r.kt)("strong",{parentName:"p"},"LIST")," component properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "viewType": "LIST",\n      "id": "give_your_list_an_id",\n      "baseResource": "Resource_to_use",\n      "orientation": "HORIZONTAL",\n       "emptyList": {\n        "message": ""\n                     },\n        "registerCard": {\n        "rules": [],\n         "views": [\n          {\n           "viewType": "COMPOUND_TEXT",\n            "primaryTextBackgroundColor": "#F9CFD1",\n             "primaryText": "@{carePlanTitle}",\n             "primaryTextColor": "@{carePlanTextColor}",\n             "fontSize": 13,\n             "padding": 7,\n              "borderRadius": 6\n      }\n    ]\n    }\n   }\n')),(0,r.kt)("h2",{id:"display-resources-inside-another-list"},"Display resources inside another list"),(0,r.kt)("p",null,"To display list resources inside a list and execute it's rules , add it an attribute called ",(0,r.kt)("strong",{parentName:"p"},"resources")," inside your list and define it's parameters as shown in the list below\nIf the config doesn't have a ",(0,r.kt)("strong",{parentName:"p"},"resources")," attribute, the app logic defaults to using relatedResources and executes rules in the rule config section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "LIST",\n  "id": "readyTasksList",\n  "resources": [\n    {\n      "id": "availableTask",\n      "relatedResourceId": "availableTasks",\n      "resourceType": "Task",\n      "conditionalFhirPathExpression": "((Task.status = \'ready\' or Task.status = \'cancelled\' or  Task.status = \'failed\') and (Task.code.empty()))"\n    }\n  ],\n  "emptyList": {\n    "message": "No visit tasks available for this patient at the moment"\n  },\n  "registerCard": {\n    "rules": [\n      {\n        "name": "taskStatus",\n        "condition": "true",\n        "actions": [\n          "data.put(\'taskStatus\', fhirPath.extractValue(Task, \'Task.status\'))"\n        ]\n      }\n    ],\n    "views": [\n      {\n        "viewType": "BUTTON",\n        "smallSized": "true",\n        "text": "@{taskDescriptionWithStartDate}",\n        "status": "@{taskStatusColorCode}",\n        "visible": "true",\n        "enabled": "@{patientActive}",\n        "actions": [\n          {\n            "trigger": "ON_CLICK",\n            "workflow": "LAUNCH_QUESTIONNAIRE",\n            "questionnaire": {\n              "id": "@{taskQuestionnaireId}",\n              "title": "@{taskDescription}",\n              "saveButtonText": "Save",\n              "taskId": "@{taskId}",\n              "resourceIdentifier": "@{taskFor}"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n')),(0,r.kt)("h2",{id:"config-properties-of-list-resources-using-the-above-json-config"},"Config properties of list resources using the above json config"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the resource"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using resourceType.Name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"relatedResourceId"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the relatedResources"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using resourceType.Name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resourceType"),(0,r.kt)("td",{parentName:"tr",align:null},"The resource to to get/fetch data from e.g Task or Careplan"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"conditionalFhirPathExpression"),(0,r.kt)("td",{parentName:"tr",align:null},"FhirPathExpression to get to use when filtering the resource defined in resourceType section"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using relatedResources types and fhirPathexpression")))),(0,r.kt)("h2",{id:"config-properties-of-a-list-widget"},"Config properties of a list widget"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the application"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"baseResource"),(0,r.kt)("td",{parentName:"tr",align:null},"Resource to get data from"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orientation"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the direction you want to the widgets to flex"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"VERTICAL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"emptyList"),(0,r.kt)("td",{parentName:"tr",align:null},"empty list json with a message to show in case the resource data to display is empty"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no visits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"registerCard"),(0,r.kt)("td",{parentName:"tr",align:null},"card to display widgets at"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"views"),(0,r.kt)("td",{parentName:"tr",align:null},"the desired widgets and their properties to be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resources"),(0,r.kt)("td",{parentName:"tr",align:null},"the list resources to execute rules for"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No but should be included if you want to display data as described in the sub-title"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h2",{id:"how-to-use-compound_text"},"How to use COMPOUND_TEXT"),(0,r.kt)("p",null,"Defines the configuration properties for a Compound Text view, which is a view that displays two text strings with an optional separator between them. This view can also have actions associated with each text string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n               "viewType": "COMPOUND_TEXT",\n               "primaryTextBackgroundColor": "#F9CFD1",\n               "primaryText": "@{taskName}",\n               "primaryTextColor": "#000000",\n               "padding": 7,\n               "borderRadius": 6\n             },\n             {\n               "viewType": "COMPOUND_TEXT",\n               "primaryText": "Start date: @{taskStartDate}",\n               "primaryTextColor": "#5A5A5A",\n               "fontSize": 20.0\n\n             }\n')),(0,r.kt)("h2",{id:"config-properties-of-compound_text"},"Config properties of COMPOUND_TEXT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextBackgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the primary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextBackgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryText"),(0,r.kt)("td",{parentName:"tr",align:null},"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextColor"),(0,r.kt)("td",{parentName:"tr",align:null},"The color of the primary text to be displayed. This should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fontSize"),(0,r.kt)("td",{parentName:"tr",align:null},"The font size of the primary and secondary texts, in SP (scaled pixels)"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"The weight of the view within its parent layout. This value is used to distribute the available space among multiple views."),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryText"),(0,r.kt)("td",{parentName:"tr",align:null},"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s text color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"separator"),(0,r.kt)("td",{parentName:"tr",align:null},"The separator to display between the primary and secondary texts. If this property is null, no separator will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextFontWeight"),(0,r.kt)("td",{parentName:"tr",align:null},"The font weight of the primary text"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextFontWeight.NORMAL]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextFontWeight"),(0,r.kt)("td",{parentName:"tr",align:null},"The font weight of the secondary text"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextFontWeight.NORMAL]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextActions"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of actions associated with the primary text. If the list is empty, no actions will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextActions"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of actions associated with the secondary text. If the list is empty, no actions will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"overflow"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines how the text should be truncated if it is too long to fit"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextOverflow.ELLIPSIS]")))),(0,r.kt)("h2",{id:"service_card-widgets"},"SERVICE_CARD widgets"),(0,r.kt)("p",null,"Displays Patient's details ,other related services and tasks. The details field within the SERVICE_CARD display patient's name and ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n       "viewType": "COLUMN",\n       "children": [\n         {\n           "viewType": "SERVICE_CARD",\n           "details": [\n             {\n               "viewType": "COMPOUND_TEXT",\n               "primaryText": "@{patientName}",\n               "primaryTextColor": "#000000"\n             },\n             {\n               "viewType": "COMPOUND_TEXT",\n               "primaryText": "ID: @{patientId}",\n               "fontSize": 14.0,\n               "primaryTextColor": "#000000"\n             }\n           ],\n           "showVerticalDivider": true,\n           "serviceButton": {\n             "visible": "@{showMemberTasks}",\n             "text": "@{taskDescription}",\n             "status": "@{serviceStatus}",\n             "smallSized": true,\n             "enabled": "false",\n             "actions": [ ]\n           },\n           "actions": [\n             {\n               "trigger": "ON_CLICK",\n               "workflow": "LAUNCH_PROFILE",\n               "id": "otherRegistersProfile"\n             }\n           ]\n         }\n       ]\n     }\n')),(0,r.kt)("h2",{id:"config-properties-of-service_card"},"Config properties of SERVICE_CARD"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.SERVICE_CARD]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"The default is 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"the default value is #FFFFFF")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that determines whether the view should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"details"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of CompoundTextProperties that represent the details of the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showVerticalDivider"),(0,r.kt)("td",{parentName:"tr",align:null},"A Boolean value that determines whether a vertical divider should be displayed in the service card view"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"servicememberIcons"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that represents the icons for the service members associated with the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serviceButton"),(0,r.kt)("td",{parentName:"tr",align:null},"A ButtonProperties object that represents a button displayed in the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"services"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ButtonProperties that represent the services associated with the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"actions"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ActionConfig objects that represent the actions that can be performed on the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h2",{id:"column-widgets"},"COLUMN widgets"),(0,r.kt)("p",null,'The column widgets are used to create a vertical layout container that can hold multiple child views. The purpose of the "COLUMN" is to arrange child views in a vertical column, with the child views stacked on top of one another in the order in which they are added.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n                 "viewType": "COLUMN",\n                 "weight": 0.7,\n                 "children": [\n                   {\n                     "viewType": "COMPOUND_TEXT",\n                     "primaryText": "VIEW ALL",\n                     "primaryTextColor": "#006EB8",\n                     "clickable": true,\n                     "fontSize": 14.0,\n                     "primaryTextActions": [\n                       {\n                         "trigger": "ON_CLICK",\n                         "workflow": "LAUNCH_REGISTER",\n                         "id": "pncRegister",\n                         "display": "@{practitionerName} - PNC Register"\n                       }\n                     ]\n                   }\n                 ]\n               }\n')),(0,r.kt)("h2",{id:"config-properties-of-column"},"Config properties of COLUMN"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.COLUMN]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"The default is 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that determines whether the view should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spacedBy"),(0,r.kt)("td",{parentName:"tr",align:null},"An integer value that represents the spacing between the children views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wrapContent"),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value that represents whether the column should wrap its content or not"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arrangement"),(0,r.kt)("td",{parentName:"tr",align:null},"An enum value that represents the vertical arrangement of the child views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"children"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ViewProperties objects that represents the child views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[416],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),d=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},s=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),g=d(n),c=r,k=g["".concat(p,".").concat(c)]||g[c]||m[c]||i;return n?a.createElement(k,l(l({ref:e},s),{},{components:n})):a.createElement(k,l({ref:e},s))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5006:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},l="Widget configurations",o={unversionedId:"engineering/android-app/configurations/user-interface/widget-config",id:"engineering/android-app/configurations/user-interface/widget-config",title:"Widget configurations",description:"Configurations used to configure widgets. FHIR Core uses widgets to render views.",source:"@site/docs/engineering/android-app/configurations/user-interface/widget-config.mdx",sourceDirName:"engineering/android-app/configurations/user-interface",slug:"/engineering/android-app/configurations/user-interface/widget-config",permalink:"/engineering/android-app/configurations/user-interface/widget-config",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/engineering/android-app/configurations/user-interface/widget-config.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Register",permalink:"/engineering/android-app/configurations/user-interface/register-config"},next:{title:"Working with rules",permalink:"/engineering/android-app/configurations/working-with-rules"}},p={},d=[{value:"LIST widget",id:"list-widget",level:2},{value:"Flex alignment widgets",id:"flex-alignment-widgets",level:3},{value:"Display resources inside another list",id:"display-resources-inside-another-list",level:3},{value:"Config properties of LIST",id:"config-properties-of-list",level:3},{value:"Config properties of nested LIST",id:"config-properties-of-nested-list",level:3},{value:"How to use COMPOUND_TEXT",id:"how-to-use-compound_text",level:2},{value:"Config properties of COMPOUND_TEXT",id:"config-properties-of-compound_text",level:3},{value:"SERVICE_CARD widgets",id:"service_card-widgets",level:2},{value:"Config properties of SERVICE_CARD",id:"config-properties-of-service_card",level:3},{value:"COLUMN widgets",id:"column-widgets",level:2},{value:"Config properties of COLUMN",id:"config-properties-of-column",level:3},{value:"IMAGE widget",id:"image-widget",level:2},{value:"Config properties of IMAGE",id:"config-properties-of-image",level:3},{value:"ROW widgets",id:"row-widgets",level:2},{value:"Config properties of ROW",id:"config-properties-of-row",level:3},{value:"VIEW Widget",id:"view-widget",level:2},{value:"Config properties of VIEW",id:"config-properties-of-view",level:3},{value:"Divider Widget",id:"divider-widget",level:3},{value:"Config properties of DIVIDER",id:"config-properties-of-divider",level:3},{value:"Spacer Widget",id:"spacer-widget",level:2},{value:"Config properties of SPACER",id:"config-properties-of-spacer",level:3}],s={toc:d};function m(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"widget-configurations"},"Widget configurations"),(0,r.kt)("p",null,"Configurations used to configure widgets. FHIR Core uses widgets to render views."),(0,r.kt)("p",null,"Examples are rows, columns, cards, and buttons."),(0,r.kt)("h2",{id:"list-widget"},"LIST widget"),(0,r.kt)("h3",{id:"flex-alignment-widgets"},"Flex alignment widgets"),(0,r.kt)("p",null,"To display items in flexRow below sample JSON config works fine. Replace ",(0,r.kt)("strong",{parentName:"p"},"COMPOUND_TEXT")," with your preferred widget component. Please note, the below json borrows from ",(0,r.kt)("strong",{parentName:"p"},"LIST")," component properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "LIST",\n  "id": "give_your_list_an_id",\n  "baseResource": "Resource_to_use",\n  "orientation": "HORIZONTAL",\n  "emptyList": {\n    "message": ""\n  },\n  "registerCard": {\n    "rules": [],\n    "views": [\n      {\n        "viewType": "COMPOUND_TEXT",\n        "primaryTextBackgroundColor": "#F9CFD1",\n        "primaryText": "@{carePlanTitle}",\n        "primaryTextColor": "@{carePlanTextColor}",\n        "fontSize": 13,\n        "padding": 7,\n        "borderRadius": 6\n      }\n    ]\n  }\n}\n')),(0,r.kt)("h3",{id:"display-resources-inside-another-list"},"Display resources inside another list"),(0,r.kt)("p",null,"To display list resources inside a list and execute it's rules , add it an attribute called ",(0,r.kt)("strong",{parentName:"p"},"resources")," inside your list and define it's parameters as shown in the list below\nIf the config doesn't have a ",(0,r.kt)("strong",{parentName:"p"},"resources")," attribute, the app logic defaults to using relatedResources and executes rules in the rule config section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "LIST",\n  "id": "readyTasksList",\n  "resources": [\n    {\n      "id": "availableTask",\n      "relatedResourceId": "availableTasks",\n      "resourceType": "Task",\n      "conditionalFhirPathExpression": "((Task.status = \'ready\' or Task.status = \'cancelled\' or  Task.status = \'failed\') and (Task.code.empty()))"\n    }\n  ],\n  "emptyList": {\n    "message": "No visit tasks available for this patient at the moment"\n  },\n  "registerCard": {\n    "rules": [\n      {\n        "name": "taskStatus",\n        "condition": "true",\n        "actions": [\n          "data.put(\'taskStatus\', fhirPath.extractValue(Task, \'Task.status\'))"\n        ]\n      }\n    ],\n    "views": [\n      {\n        "viewType": "BUTTON",\n        "smallSized": "true",\n        "text": "@{taskDescriptionWithStartDate}",\n        "status": "@{taskStatusColorCode}",\n        "visible": "true",\n        "enabled": "@{patientActive}",\n        "actions": [\n          {\n            "trigger": "ON_CLICK",\n            "workflow": "LAUNCH_QUESTIONNAIRE",\n            "questionnaire": {\n              "id": "@{taskQuestionnaireId}",\n              "title": "@{taskDescription}",\n              "saveButtonText": "Save",\n              "taskId": "@{taskId}",\n              "resourceIdentifier": "@{taskFor}"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n')),(0,r.kt)("h3",{id:"config-properties-of-list"},"Config properties of LIST"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the application"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"baseResource"),(0,r.kt)("td",{parentName:"tr",align:null},"Resource to get data from"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orientation"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the direction you want to the widgets to flex"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"VERTICAL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"emptyList"),(0,r.kt)("td",{parentName:"tr",align:null},"empty list json with a message to show in case the resource data to display is empty"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no visits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"registerCard"),(0,r.kt)("td",{parentName:"tr",align:null},"card to display widgets at"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"views"),(0,r.kt)("td",{parentName:"tr",align:null},"the desired widgets and their properties to be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resources"),(0,r.kt)("td",{parentName:"tr",align:null},"the list resources to execute rules for"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No but should be included if you want to display data as described in the sub-title"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h3",{id:"config-properties-of-nested-list"},"Config properties of nested LIST"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the resource"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using resourceType.Name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"relatedResourceId"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the relatedResources"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no but highly recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using resourceType.Name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resourceType"),(0,r.kt)("td",{parentName:"tr",align:null},"The resource to to get/fetch data from e.g Task or Careplan"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"conditionalFhirPathExpression"),(0,r.kt)("td",{parentName:"tr",align:null},"FhirPathExpression to get to use when filtering the resource defined in resourceType section"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no"),(0,r.kt)("td",{parentName:"tr",align:"center"},"app defaults to using relatedResources types and fhirPathexpression")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sortConfig"),(0,r.kt)("td",{parentName:"tr",align:null},"Configuration used for sorting LIST widget resource"),(0,r.kt)("td",{parentName:"tr",align:"center"},"no"),(0,r.kt)("td",{parentName:"tr",align:"center"})))),(0,r.kt)("h2",{id:"how-to-use-compound_text"},"How to use COMPOUND_TEXT"),(0,r.kt)("p",null,"Defines the configuration properties for a Compound Text view, which is a view that displays two text strings with an optional separator between them. This view can also have actions associated with each text string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n {\n   "viewType": "COMPOUND_TEXT",\n   "primaryTextBackgroundColor": "#F9CFD1",\n   "primaryText": "@{taskName}",\n   "primaryTextColor": "#000000",\n   "padding": 7,\n   "borderRadius": 6\n },\n {\n   "viewType": "COMPOUND_TEXT",\n   "primaryText": "Start date: @{taskStartDate}",\n   "primaryTextColor": "#5A5A5A",\n   "fontSize": 20\n }\n]\n')),(0,r.kt)("h3",{id:"config-properties-of-compound_text"},"Config properties of COMPOUND_TEXT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextBackgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the primary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextBackgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryText"),(0,r.kt)("td",{parentName:"tr",align:null},"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextColor"),(0,r.kt)("td",{parentName:"tr",align:null},"The color of the primary text to be displayed. This should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fontSize"),(0,r.kt)("td",{parentName:"tr",align:null},"The font size of the primary and secondary texts, in SP (scaled pixels)"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"The weight of the view within its parent layout. This value is used to distribute the available space among multiple views."),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryText"),(0,r.kt)("td",{parentName:"tr",align:null},"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s text color'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"separator"),(0,r.kt)("td",{parentName:"tr",align:null},"The separator to display between the primary and secondary texts. If this property is null, no separator will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextFontWeight"),(0,r.kt)("td",{parentName:"tr",align:null},"The font weight of the primary text"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextFontWeight.NORMAL]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextFontWeight"),(0,r.kt)("td",{parentName:"tr",align:null},"The font weight of the secondary text"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextFontWeight.NORMAL]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primaryTextActions"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of actions associated with the primary text. If the list is empty, no actions will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secondaryTextActions"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of actions associated with the secondary text. If the list is empty, no actions will be displayed"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"overflow"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines how the text should be truncated if it is too long to fit"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[TextOverflow.ELLIPSIS]")))),(0,r.kt)("h2",{id:"service_card-widgets"},"SERVICE_CARD widgets"),(0,r.kt)("p",null,"Displays Patient's details ,other related services and tasks. The details field within the SERVICE_CARD display patient's name and ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n "viewType": "COLUMN",\n "children": [\n   {\n     "viewType": "SERVICE_CARD",\n     "details": [\n       {\n         "viewType": "COMPOUND_TEXT",\n         "primaryText": "@{patientName}",\n         "primaryTextColor": "#000000"\n       },\n       {\n         "viewType": "COMPOUND_TEXT",\n         "primaryText": "ID: @{patientId}",\n         "fontSize": 14,\n         "primaryTextColor": "#000000"\n       }\n     ],\n     "showVerticalDivider": true,\n     "serviceButton": {\n       "visible": "@{showMemberTasks}",\n       "text": "@{taskDescription}",\n       "status": "@{serviceStatus}",\n       "smallSized": true,\n       "enabled": "false",\n       "actions": []\n     },\n     "actions": [\n       {\n         "trigger": "ON_CLICK",\n         "workflow": "LAUNCH_PROFILE",\n         "id": "otherRegistersProfile"\n       }\n     ]\n   }\n ]\n}\n')),(0,r.kt)("h3",{id:"config-properties-of-service_card"},"Config properties of SERVICE_CARD"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.SERVICE_CARD]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"The default is 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"the default value is #FFFFFF")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that determines whether the view should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"details"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of CompoundTextProperties that represent the details of the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showVerticalDivider"),(0,r.kt)("td",{parentName:"tr",align:null},"A Boolean value that determines whether a vertical divider should be displayed in the service card view"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"servicememberIcons"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that represents the icons for the service members associated with the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serviceButton"),(0,r.kt)("td",{parentName:"tr",align:null},"A ButtonProperties object that represents a button displayed in the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"services"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ButtonProperties that represent the services associated with the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"actions"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ActionConfig objects that represent the actions that can be performed on the service card"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h2",{id:"column-widgets"},"COLUMN widgets"),(0,r.kt)("p",null,'The column widgets are used to create a vertical layout container that can hold multiple child views. The purpose of the "COLUMN" is to arrange child views in a vertical column, with the child views stacked on top of one another in the order in which they are added.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "COLUMN",\n  "weight": 0.7,\n  "children": [\n    {\n      "viewType": "COMPOUND_TEXT",\n      "primaryText": "VIEW ALL",\n      "primaryTextColor": "#006EB8",\n      "clickable": true,\n      "fontSize": 14,\n      "primaryTextActions": [\n        {\n          "trigger": "ON_CLICK",\n          "workflow": "LAUNCH_REGISTER",\n          "id": "pncRegister",\n          "display": "@{practitionerName} - PNC Register"\n        }\n      ]\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"config-properties-of-column"},"Config properties of COLUMN"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"First viewType should be a list. This will help in iterating over the data to display"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.COLUMN]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"The default is 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"Rounds the corners of the view's outer edge"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Dertimines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's height"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view is clickable"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"A String value that determines whether the view should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spacedBy"),(0,r.kt)("td",{parentName:"tr",align:null},"An integer value that represents the spacing between the children views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wrapContent"),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value that represents whether the column should wrap its content or not"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arrangement"),(0,r.kt)("td",{parentName:"tr",align:null},"An enum value that represents the vertical arrangement of the child views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"children"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ViewProperties objects that represents the child views of the column"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h2",{id:"image-widget"},"IMAGE widget"),(0,r.kt)("p",null,"Displays icons or images."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "IMAGE",\n  "tint": "#FFFFFF",\n  "size": 40,\n  "imageConfig": {\n    "type": "local",\n    "reference": "@{taskStatusIcon}"\n  },\n  "padding": 4,\n  "backgroundColor": "@{taskStatusIcon}",\n  "isCircular": true\n}\n')),(0,r.kt)("h3",{id:"config-properties-of-image"},"Config properties of IMAGE"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.IMAGE]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tint"),(0,r.kt)("td",{parentName:"tr",align:null},"a string specified as RGB Hex e.g '#FFFFFF'"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the Image, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"Size of the image in pixels"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"24")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"imageConfig"),(0,r.kt)("td",{parentName:"tr",align:null},"The property that points to the actual image. It can either point to a local drawable or a server side Binary file"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.None]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the view should fill its parent's width"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"shape"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to clip the image into a shape e.g into a circle or rectangle"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")))),(0,r.kt)("h2",{id:"row-widgets"},"ROW widgets"),(0,r.kt)("p",null,"The purpose of the row is to act as a container for organizing and laying out its child views horizontally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "ROW",\n  "arrangement": "SPACE_BETWEEN",\n  "fillMaxWidth": true,\n  "children": [\n    {\n      "viewType": "COLUMN",\n      "children": [\n        {\n          "viewType": "COMPOUND_TEXT",\n          "primaryText": "Last restock",\n          "primaryTextColor": "#5A5A5A",\n          "fontSize": 18.0\n        },\n        {\n          "viewType": "COMPOUND_TEXT",\n          "primaryText": "Previous restock ",\n          "fontSize": 16.0,\n          "secondaryText": "@{lastRestockedDate}"\n        }\n      ]\n    },\n    {\n      "viewType": "COMPOUND_TEXT",\n      "primaryText": "@{lastRestockedAmount}",\n      "primaryTextColor": "#000000",\n      "fontSize": 16.0\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"config-properties-of-row"},"Config properties of ROW"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the type of view"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"The weight of the row. It determines how much space this row should occupy relative to other rows in a layout that uses weights."),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"The default is 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the row.It is specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"The radius of the row's corners in pixels. Setting this value creates rounded corners for the row."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the alignment of the row's content within the row."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment.NONE]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, the row will attempt to occupy the maximum available width in its parent layout."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, the row will attempt to occupy the maximum available height in its parent layout."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},'Indicates whether the row is clickable. If set to "true", the row can be interacted with and handle click events.'),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},'Specifies the visibility of the row. If set to "true", the row will be visible, otherwise, if set to "false", it will be hidden'),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spacedBy"),(0,r.kt)("td",{parentName:"tr",align:null},"The spacing between the children views of the row, in pixels."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arrangement"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the arrangement of the children views within the row."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wrapContent"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, the row's width and height will adjust to wrap its content tightly."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"children"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of ",(0,r.kt)("strong",{parentName:"td"},"ViewProperties")," objects representing the children views within the row."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"emptyList()")))),(0,r.kt)("h2",{id:"view-widget"},"VIEW Widget"),(0,r.kt)("p",null,"Defines the hierarchical stucture of views to be rendered. It contains various properties that define its appearance and behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"views": [\n  {\n    "viewType": "COLUMN",\n    "children": [\n      {\n        "viewType": "SERVICE_CARD",\n        "details": [\n          {\n            "viewType": "COMPOUND_TEXT",\n            "primaryText": "@{patientName}",\n            "primaryTextColor": "#000000"\n          },\n          {\n            "viewType": "COMPOUND_TEXT",\n            "primaryText": "{{ id.patient.id }}",\n            "fontSize": 14,\n            "primaryTextColor": "#000000"\n          }\n        ],\n        "showVerticalDivider": false,\n        "serviceButton": {\n          "visible": true,\n          "text": "{{ anc.visit }}",\n          "status": "DUE",\n          "smallSized": true\n        },\n        "actions": [\n          {\n            "trigger": "ON_CLICK",\n            "workflow": "LAUNCH_PROFILE",\n            "id": "defaultProfile",\n            "params": [\n              {\n                "key": "patientId",\n                "value": "@{patientId}"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }            \n]\n')),(0,r.kt)("h3",{id:"config-properties-of-view"},"Config properties of VIEW"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the type of view. It acts as a discriminator to identify the type of view during runtime."),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"weight"),(0,r.kt)("td",{parentName:"tr",align:null},"It defines the weight of the view, which is typically used in layout containers with weighted distribution to control the amount of space a view occupies relative to other views."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'t represents the background color of the view, specified as a color code in the format "#RRGGBB" or "#AARRGGBB". If null, it indicates a transparent background.'),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"String?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"It defines the padding around the content of the view, in pixels."),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderRadius"),(0,r.kt)("td",{parentName:"tr",align:null},"It specifies the radius of the view's corners in pixels. Setting this property creates rounded corners for the view."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alignment"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the alignment of the row's content within the row."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewAlignment]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"It indicates whether the view should attempt to occupy the maximum available width in its parent layout."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Boolean")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fillMaxHeight"),(0,r.kt)("td",{parentName:"tr",align:null},"It indicates whether the view should attempt to occupy the maximum available height in its parent layout."),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Boolean")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickable"),(0,r.kt)("td",{parentName:"tr",align:null},'Indicates whether the view is clickable. If set to "true", the row can be interacted with and handle click events.'),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},'Specifies the visibility of the view. If set to "true", the row will be visible, otherwise, if set to "false", it will be hidden'),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"String")))),(0,r.kt)("h3",{id:"divider-widget"},"Divider Widget"),(0,r.kt)("p",null,"The Divider widget allows one to visually separate and organize different components within a graphical user interface (GUI).\nIt creates a horizontal line that acts as a visual boundary, enhancing the overall aesthetics and user experience."),(0,r.kt)("p",null,"To use the Divider widget in the app, one has to define the JSON file as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "BORDER",\n  "thickness": 0.8\n}\n')),(0,r.kt)("p",null,"The JSON configuration instructs the app to create a Divider widget with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"View Type: The ",(0,r.kt)("inlineCode",{parentName:"li"},"viewType: BORDER")," setting specifies the  type of widget that will be rendered, and in this case, it is set to ",(0,r.kt)("inlineCode",{parentName:"li"},'"BORDER"')," type which renders a solid horizontal line as the divider."),(0,r.kt)("li",{parentName:"ul"},"Thickness: The ",(0,r.kt)("inlineCode",{parentName:"li"},"thickness: 0.8")," setting determines the width of the Divider. By adjusting the thickness value, one can precisely control the Divider's visual appearance.")),(0,r.kt)("h3",{id:"config-properties-of-divider"},"Config properties of DIVIDER"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of widget that will be rendered in this case it is the ",(0,r.kt)("inlineCode",{parentName:"td"},"BORDER")," view."),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.BORDER]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"thickness"),(0,r.kt)("td",{parentName:"tr",align:null},"The width of the Divider."),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"#FFFFFF")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"A string value that determines whether the view should be visible"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")))),(0,r.kt)("h2",{id:"spacer-widget"},"Spacer Widget"),(0,r.kt)("p",null,"The Spacer widget is used to create a flexible, empty space between two views. It is used to create a space between two views in a layout, and it is also used to create a space between the edge of a view and its parent layout."),(0,r.kt)("p",null,"To use the Divider widget in the app, one has to define the JSON file as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "viewType": "SPACER",\n  "height": 10\n}\n')),(0,r.kt)("p",null,"After defining the above JSON example a view will be rendered with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"View Type: The ",(0,r.kt)("inlineCode",{parentName:"li"},"viewType: SPACER")," setting specifies that the widget that will be rendered is a spacer, which creates an empty space or gap between other UI elements."),(0,r.kt)("li",{parentName:"ul"},"Height: The ",(0,r.kt)("inlineCode",{parentName:"li"},"height: 10")," setting determines the height of the spacer. By setting the height value to 10, the spacer will have a height of 10 density-independent pixels which scales appropriately across different screen densities, ensuring consistent visual appearance on various devices.")),(0,r.kt)("h3",{id:"config-properties-of-spacer"},"Config properties of SPACER"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"viewType"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of widget that will be rendered in this case it is the ",(0,r.kt)("inlineCode",{parentName:"td"},"SPACER")," view."),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[ViewType.SPACER]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"height"),(0,r.kt)("td",{parentName:"tr",align:null},"The height of the Spacer."),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"_")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"#FFFFFF")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"padding"),(0,r.kt)("td",{parentName:"tr",align:null},"Offsets the content of the view by a specific number of pixels. This should be a number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0")))))}m.isMDXComponent=!0}}]);
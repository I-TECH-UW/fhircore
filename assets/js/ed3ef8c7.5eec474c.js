"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[520],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5652:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},o="Publishing FHIR SDK Library Artifacts",l={unversionedId:"developer-setup/publishing-fhir-sdk-artifacts",id:"developer-setup/publishing-fhir-sdk-artifacts",title:"Publishing FHIR SDK Library Artifacts",description:"Local Publishing",source:"@site/docs/developer-setup/publishing-fhir-sdk-artifacts.mdx",sourceDirName:"developer-setup",slug:"/developer-setup/publishing-fhir-sdk-artifacts",permalink:"/developer-setup/publishing-fhir-sdk-artifacts",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/developer-setup/publishing-fhir-sdk-artifacts.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Keycloak Auth Token Configuration",permalink:"/developer-setup/keycloak-auth-token-config"},next:{title:"Sentry setup",permalink:"/developer-setup/sentry"}},s={},p=[{value:"Local Publishing",id:"local-publishing",level:3},{value:"Remote Publishing",id:"remote-publishing",level:3},{value:"Credentials",id:"credentials",level:4},{value:"Processes",id:"processes",level:4},{value:"Commits",id:"commits",level:4},{value:"Versioning",id:"versioning",level:4},{value:"Publishing",id:"publishing",level:3}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"publishing-fhir-sdk-library-artifacts"},"Publishing FHIR SDK Library Artifacts"),(0,r.kt)("h3",{id:"local-publishing"},"Local Publishing"),(0,r.kt)("p",null,"At the moment, we have the following FHIR SDK artifacts that need to be released so that they can be included as dependencies on reliant applications e.g. FHIR Core"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Android FHIR Common Library"),(0,r.kt)("li",{parentName:"ul"},"Android FHIR Engine Library"),(0,r.kt)("li",{parentName:"ul"},"Android FHIR Structured Data Capture Library"),(0,r.kt)("li",{parentName:"ul"},"Android FHIR Workflow Library"),(0,r.kt)("li",{parentName:"ul"},"Android FHIR Structured Data Capture - Barcode Extensions (contrib)")),(0,r.kt)("p",null,"Sometimes one wants to test the changes on the repo e.g. on the ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch without doing a remote release to ",(0,r.kt)("em",{parentName:"p"},"Sonatype")," during development. It is possible to do this locally."),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("em",{parentName:"p"},"Android FHIR Structured Data Capture(SDC) Library")," as an example:"),(0,r.kt)("p",null,"First,  one needs to edit the ",(0,r.kt)("em",{parentName:"p"},"Releases")," file ",(0,r.kt)("inlineCode",{parentName:"p"},"buildSrc/src/main/kotlin/Releases.kt")," and add a unique(to your local machine) artifact identifier for the SDC library version.\nFor instance, if on the ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch under the ",(0,r.kt)("inlineCode",{parentName:"p"},"object DataCapture : LibraryArtifact")," the version reads ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1.0-beta02"),", you might want to change that to ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1.0-beta02-dev"),". Then later for new changes use ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1.0-beta02-dev2")," and so on."),(0,r.kt)("p",null,"This approach allows for multiple variations of local artifacts with your development changes and also helps avoid clashes with any remote artifact versions with a similar identifier."),(0,r.kt)("p",null,"Using the above example you then need to include the new version as a dependency in your ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle")," file and reference it like this: ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"p"},"api('com.google.android.fhir:data-capture:0.1.0-beta02-dev') {")),(0,r.kt)("p",null,"Once all the above is in place you just need to run the command: ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"./gradlew :datacapture:publishReleasePublicationToMavenLocal"),". ",(0,r.kt)("br",null)),(0,r.kt)("p",null,"Your artifact should now be available under your maven local repo. location ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.m2/repository/com/google/android/fhir/data-capture/0.1.0-beta02-dev/")),(0,r.kt)("p",null,"Building FHIR Core should now import the new artifact version. MavenLocal is already configured as an artifact source."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," This process needs to be repeated for all of the above aforementioned artifacts incase there are changes required there as well for testing. Also note, if you need to test changes present in other un-merged branches, you'd need to build the release artifact from a release branch that has all the other (un-merged) branch changes as well."),(0,r.kt)("h3",{id:"remote-publishing"},"Remote Publishing"),(0,r.kt)("h4",{id:"credentials"},"Credentials"),(0,r.kt)("p",null,"  In order to publish artifacts in OpenSRP's ",(0,r.kt)("inlineCode",{parentName:"p"},"org.smartregisters")," ",(0,r.kt)("em",{parentName:"p"},"Sonatype")," group on maven, you need to be authenticated (and authorized). With the current configuration you need to set up your client credentials in the ",(0,r.kt)("em",{parentName:"p"},"global")," ",(0,r.kt)("inlineCode",{parentName:"p"},"gradle.properties")," file as show below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"~/.gradle/gradle.properties\n\n  sonatypeUsername=<username>\n  sonatypePassword=<password>\n")),(0,r.kt)("p",null," ",(0,r.kt)("strong",{parentName:"p"},"Note:")," Name the property keys exactly as shown above. The credentials should not be pushed for version control else they will be available publicly. This set up will also work if you have your own Sonatype account you want to publish to. "),(0,r.kt)("h4",{id:"processes"},"Processes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On OpenSRP's Github fork of the Android FHIR SDK (Assuming there are new changes) click on ",(0,r.kt)("em",{parentName:"li"},"Sync fork")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Check out")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"master")," branch locally and ",(0,r.kt)("em",{parentName:"li"},"pull")," the latest changes"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Checkout")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"master-release")," branch and ",(0,r.kt)("em",{parentName:"li"},"merge")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"master")," changes"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Update the versions")," of the various modules you want to publish in the ",(0,r.kt)("inlineCode",{parentName:"li"},"buildSrc/src/main/kotlin/Releases.kt")," file"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Make a commit")," with the updated versions and ",(0,r.kt)("em",{parentName:"li"},"add a commit message")," in the format shown in the ",(0,r.kt)("a",{parentName:"li",href:"#commits"},"Commits section below")),(0,r.kt)("li",{parentName:"ol"},"Push the commit to the ",(0,r.kt)("inlineCode",{parentName:"li"},"master-release")," branch for tracking"),(0,r.kt)("li",{parentName:"ol"},"Now that the ",(0,r.kt)("inlineCode",{parentName:"li"},"master-release")," branch has all the latest updates from parent ",(0,r.kt)("inlineCode",{parentName:"li"},"master"),", ",(0,r.kt)("em",{parentName:"li"},"Check out")," to a new branch on your local e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"opensrp-release1")),(0,r.kt)("li",{parentName:"ol"},"Merge in any other unmerged PR branches mentioned in the previous commit message and have not been merged to ",(0,r.kt)("inlineCode",{parentName:"li"},"master")," yet"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Publish")," the specific modules that you wanted. See the ",(0,r.kt)("a",{parentName:"li",href:"#publishing"},"Publishing section below")),(0,r.kt)("li",{parentName:"ol"},"After a successful publish to Maven you can ",(0,r.kt)("em",{parentName:"li"},"Delete")," your release branch.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Always remember to check out the ",(0,r.kt)("em",{parentName:"p"},"commits diff")," to tell which modules were affected by the latest changes. You can confirm that your module artifact was uploaded as it is available at ",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/org/smartregister/"},"https://oss.sonatype.org/content/repositories/snapshots/org/smartregister/")),(0,r.kt)("h4",{id:"commits"},"Commits"),(0,r.kt)("p",null,"  Each new commit message on the ",(0,r.kt)("inlineCode",{parentName:"p"},"master-release")," branch should build upon the previous commit message. The format is as shown below, with the title listing all modules.\nCopy over the whole message and remove any entries for PRs already merged into ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," and add any new ones."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," SDK Release: Engine, SDC, Workflow, Contrib:Barcode, Common, Knowledger\n - With unmerged PR #1344 branch\n - With unmerged PR #1542 branch\n")),(0,r.kt)("p",null,"See related ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/android-fhir/commit/10e46a0eac5f41b68b5bb1caa87069b83d36c6b1"},"sample commit here")),(0,r.kt)("p",null," ",(0,r.kt)("strong",{parentName:"p"},"Note:")," The above helps the next person doing a release to include exactly all the code updates that had been merged in previeously. If by the time we are publishing again the branch has already been merged into ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch then there'd be no need to add the message again. Also a glance at the header shows which specific modules were affected. Other than confirming the module changes that were incorporated after merging in ",(0,r.kt)("inlineCode",{parentName:"p"},"master"),", check out which modules the unmerged PRs updated. The commit message is additive hence always use the previous commit message as a template for the new commit message (to either reduct or add the current required unmerged PRs)."),(0,r.kt)("h4",{id:"versioning"},"Versioning"),(0,r.kt)("p",null," When versioning we extend from the current versions of the SDK library by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"-preview-SNAPSHOT")," suffix. Subsequently in future updates we increment that version e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"-preview2-SNAPSHOT")),(0,r.kt)("p",null," In the ",(0,r.kt)("inlineCode",{parentName:"p"},"buildSrc/src/main/kotlin/Releases.kt")," file, we edit the entry as shown below "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildSrc/src/main/kotlin/Releases.kt\n\nobject DataCapture : LibraryArtifact {\n  override val artifactId = "data-capture"\n  override val version = "1.0.0-preview-SNAPSHOT"\n  override val name = "Android FHIR Structured Data Capture Library"\n}\n')),(0,r.kt)("h3",{id:"publishing"},"Publishing"),(0,r.kt)("p",null,"  Once all the above is in place you just need to run the command: ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"./gradlew :datacapture:publishReleasePublicationToSonatypeRepository --stacktrace"),". All the other modules follow a similar format, you only need to change the module you are targeting, e.g. to publish ",(0,r.kt)("em",{parentName:"p"},"engine")," use the command: ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"p"},"./gradlew :engine:publishReleasePublicationToSonatypeRepository --stacktrace")),(0,r.kt)("br",null),(0,r.kt)("br",null),"Your artifact should now be available under the corresponding artifact group under your org. on Sonatype ",(0,r.kt)("br",null)," `https://oss.sonatype.org/content/repositories/snapshots/org/smartregister/data-capture/`")}d.isMDXComponent=!0}}]);
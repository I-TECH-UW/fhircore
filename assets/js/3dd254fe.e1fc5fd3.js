"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[641],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9856:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const i={},o="Working with rules",l={unversionedId:"android-app/configurations/working-with-rules",id:"android-app/configurations/working-with-rules",title:"Working with rules",description:"Rules are used to define logic and conditions for evaluating and processing healthcare data. FHIR rules can be used to validate data, create alerts and notifications based on certain conditions, or trigger workflows and other automated processes.",source:"@site/docs/android-app/configurations/working-with-rules.mdx",sourceDirName:"android-app/configurations",slug:"/android-app/configurations/working-with-rules",permalink:"/android-app/configurations/working-with-rules",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/android-app/configurations/working-with-rules.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Widget configurations",permalink:"/android-app/configurations/user-interface/widget-config"},next:{title:"Developer setup",permalink:"/android-app/developer-setup/"}},s={},u=[{value:"Using the <code>extractValue()</code> rule",id:"using-the-extractvalue-rule",level:2},{value:"Configuring the properties of the <code>extractValue()</code>",id:"configuring-the-properties-of-the-extractvalue",level:3},{value:"Using the <code>evaluateToBoolean()</code> rule",id:"using-the-evaluatetoboolean-rule",level:2},{value:"Configuring the properties of the <code>evaluateToBoolean()</code>",id:"configuring-the-properties-of-the-evaluatetoboolean",level:3},{value:"Passing parameters to <code>evaluateToBoolean()</code>",id:"passing-parameters-to-evaluatetoboolean",level:3},{value:"Using the <code>generateTaskServiceStatus()</code> rule",id:"using-the-generatetaskservicestatus-rule",level:2}],d={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-rules"},"Working with rules"),(0,r.kt)("p",null,"Rules are used to define logic and conditions for evaluating and processing healthcare data. FHIR rules can be used to validate data, create alerts and notifications based on certain conditions, or trigger workflows and other automated processes.\nRules can also be used to extract specific data from a FHIR resource or to transform data from one format to another."),(0,r.kt)("h2",{id:"using-the-extractvalue-rule"},"Using the ",(0,r.kt)("inlineCode",{parentName:"h2"},"extractValue()")," rule"),(0,r.kt)("p",null,"To extract specific data value in the sample JSON below, include ",(0,r.kt)("strong",{parentName:"p"},"extractValue()")," and add the required parameters to the method in order to extract the required value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"rules": [\n    {\n      "name": "familyName",\n      "condition": "true",\n      "actions": [\n        "data.put(\'familyName\', fhirPath.extractValue(Group, \'Group.name\'))"\n      ]\n    },\n    {\n      "name": "familyId",\n      "condition": "true",\n      "actions": [\n        "data.put(\'familyId\', fhirPath.extractValue(Group, \'Group.identifier[0].value\'))"\n      ]\n    },\n    {\n      "name": "familyLogicalId",\n      "condition": "true",\n      "actions": [\n        "data.put(\'familyLogicalId\', fhirPath.extractValue(Group, \'Group.id\'))"\n      ]\n    }\n  ],\n')),(0,r.kt)("h3",{id:"configuring-the-properties-of-the-extractvalue"},"Configuring the properties of the ",(0,r.kt)("inlineCode",{parentName:"h3"},"extractValue()")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides a descriptive name for the rule to be extracted"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"condition"),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates that the rule should always be evaluated"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"actions"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the specific operations to be performed when the rule is evaluated"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})))),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},'"data.put()"')," function is used to store the extracted data in a data object, using a key-value pair format."),(0,r.kt)("h2",{id:"using-the-evaluatetoboolean-rule"},"Using the ",(0,r.kt)("inlineCode",{parentName:"h2"},"evaluateToBoolean()")," rule"),(0,r.kt)("p",null,"This rule is used within the rules engine or workflow to be able to determine whether an expression or condition is true or not. To evaluate specific data in the sample JSON below, include ",(0,r.kt)("strong",{parentName:"p"},"evaluateToBoolean()")," and add the required parameters to the method in order to determine whether the output is true or false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name": "isPregnant",\n      "condition": "true",\n      "actions": [\n        "data.put(\'isPregnant\', service.evaluateToBoolean(data.get(\'activeConditions\'), \\"Condition.code.text = \'Pregnant\' \\", false))"\n      ]  \n    },\n')),(0,r.kt)("h3",{id:"configuring-the-properties-of-the-evaluatetoboolean"},"Configuring the properties of the ",(0,r.kt)("inlineCode",{parentName:"h3"},"evaluateToBoolean()")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides a descriptive name for the rule to be extracted"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"condition"),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates that the rule should always be evaluated"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"actions"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the specific operations to be performed when the rule is evaluated"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"description"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides relevant information about the rule to be evaluated"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"priority"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the priority of the component. The priority value determines the order in which the components are evaluated and executed. Lower values indicate higher priority"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"1")))),(0,r.kt)("h3",{id:"passing-parameters-to-evaluatetoboolean"},"Passing parameters to ",(0,r.kt)("inlineCode",{parentName:"h3"},"evaluateToBoolean()")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"context"),", e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"data.get('activeConditions')"),", specifies the context or data from which the expression is being evaluated"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"FhirPathExpression"),", e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"\"Condition.code.text = 'Pregnant' \\\""),", specifies the expression to be evaluated. It contains the logical operators and variables that refernce values from the context"),(0,r.kt)("li",{parentName:"ol"},"An optional ",(0,r.kt)("inlineCode",{parentName:"li"},"defaultValue"),", e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", specifies a boolean default to be returned if the expression results in an error or does not produce a boolean value")),(0,r.kt)("h2",{id:"using-the-generatetaskservicestatus-rule"},"Using the ",(0,r.kt)("inlineCode",{parentName:"h2"},"generateTaskServiceStatus()")," rule"),(0,r.kt)("p",null,"This rule is used within the ruels engine or workflow to generate the correct service status when given the ",(0,r.kt)("inlineCode",{parentName:"p"},"Task.status")," . Only one parameter is passed of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskStatus"),". Below is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\n...\n    {\n      "name": "serviceStatus",\n      "condition": "true",\n      "actions": [\n        "data.put(\'serviceStatus\', service.generateTaskServiceStatus(Task))"\n      ]\n    }\n')))}p.isMDXComponent=!0}}]);
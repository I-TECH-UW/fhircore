"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[746],{7295:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>x,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var n=i(5893),s=i(1151);const r={},l="Widgets",d={id:"engineering/android-app/configuring/config-types/widget",title:"Widgets",description:"Configurations used to configure widgets. FHIR Core uses widgets to render views.",source:"@site/docs/engineering/android-app/configuring/config-types/widget.mdx",sourceDirName:"engineering/android-app/configuring/config-types",slug:"/engineering/android-app/configuring/config-types/widget",permalink:"/engineering/android-app/configuring/config-types/widget",draft:!1,unlisted:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/engineering/android-app/configuring/config-types/widget.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Syncronization",permalink:"/engineering/android-app/configuring/config-types/sync"},next:{title:"Editing",permalink:"/engineering/android-app/configuring/editing"}},c={},h=[{value:"LIST widget",id:"list-widget",level:2},{value:"Flex alignment widgets",id:"flex-alignment-widgets",level:3},{value:"Display resources inside another list",id:"display-resources-inside-another-list",level:3},{value:"Config properties of LIST",id:"config-properties-of-list",level:3},{value:"Config properties of nested LIST",id:"config-properties-of-nested-list",level:3},{value:"How to use COMPOUND_TEXT",id:"how-to-use-compound_text",level:2},{value:"Config properties of COMPOUND_TEXT",id:"config-properties-of-compound_text",level:3},{value:"SERVICE_CARD widgets",id:"service_card-widgets",level:2},{value:"Config properties of SERVICE_CARD",id:"config-properties-of-service_card",level:3},{value:"COLUMN widgets",id:"column-widgets",level:2},{value:"Config properties of COLUMN",id:"config-properties-of-column",level:3},{value:"IMAGE widget",id:"image-widget",level:2},{value:"Config properties of IMAGE",id:"config-properties-of-image",level:3},{value:"ROW widgets",id:"row-widgets",level:2},{value:"Config properties of ROW",id:"config-properties-of-row",level:3},{value:"VIEW Widget",id:"view-widget",level:2},{value:"Config properties of VIEW",id:"config-properties-of-view",level:3},{value:"Divider Widget",id:"divider-widget",level:3},{value:"Config properties of DIVIDER",id:"config-properties-of-divider",level:3},{value:"Spacer Widget",id:"spacer-widget",level:2},{value:"Config properties of SPACER",id:"config-properties-of-spacer",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"widgets",children:"Widgets"}),"\n",(0,n.jsx)(t.p,{children:"Configurations used to configure widgets. FHIR Core uses widgets to render views."}),"\n",(0,n.jsx)(t.p,{children:"Examples are rows, columns, cards, and buttons."}),"\n",(0,n.jsx)(t.h2,{id:"list-widget",children:"LIST widget"}),"\n",(0,n.jsx)(t.h3,{id:"flex-alignment-widgets",children:"Flex alignment widgets"}),"\n",(0,n.jsxs)(t.p,{children:["To display items in flexRow below sample JSON config works fine. Replace ",(0,n.jsx)(t.strong,{children:"COMPOUND_TEXT"})," with your preferred widget component. Please note, the below json borrows from ",(0,n.jsx)(t.strong,{children:"LIST"})," component properties"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "LIST",\n  "id": "give_your_list_an_id",\n  "baseResource": "Resource_to_use",\n  "orientation": "HORIZONTAL",\n  "emptyList": {\n    "message": ""\n  },\n  "registerCard": {\n    "rules": [],\n    "views": [\n      {\n        "viewType": "COMPOUND_TEXT",\n        "primaryTextBackgroundColor": "#F9CFD1",\n        "primaryText": "@{carePlanTitle}",\n        "primaryTextColor": "@{carePlanTextColor}",\n        "fontSize": 13,\n        "padding": 7,\n        "borderRadius": 6\n      }\n    ]\n  }\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"display-resources-inside-another-list",children:"Display resources inside another list"}),"\n",(0,n.jsxs)(t.p,{children:["To display list resources inside a list and execute it's rules , add it an attribute called ",(0,n.jsx)(t.strong,{children:"resources"})," inside your list and define it's parameters as shown in the list below\nIf the config doesn't have a ",(0,n.jsx)(t.strong,{children:"resources"})," attribute, the app logic defaults to using relatedResources and executes rules in the rule config section."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "LIST",\n  "id": "readyTasksList",\n  "resources": [\n    {\n      "id": "availableTask",\n      "relatedResourceId": "availableTasks",\n      "resourceType": "Task",\n      "conditionalFhirPathExpression": "((Task.status = \'ready\' or Task.status = \'cancelled\' or  Task.status = \'failed\') and (Task.code.empty()))"\n    }\n  ],\n  "emptyList": {\n    "message": "No visit tasks available for this patient at the moment"\n  },\n  "registerCard": {\n    "rules": [\n      {\n        "name": "taskStatus",\n        "condition": "true",\n        "actions": [\n          "data.put(\'taskStatus\', fhirPath.extractValue(Task, \'Task.status\'))"\n        ]\n      }\n    ],\n    "views": [\n      {\n        "viewType": "BUTTON",\n        "smallSized": "true",\n        "text": "@{taskDescriptionWithStartDate}",\n        "status": "@{taskStatusColorCode}",\n        "visible": "true",\n        "enabled": "@{patientActive}",\n        "actions": [\n          {\n            "trigger": "ON_CLICK",\n            "workflow": "LAUNCH_QUESTIONNAIRE",\n            "questionnaire": {\n              "id": "@{taskQuestionnaireId}",\n              "title": "@{taskDescription}",\n              "saveButtonText": "Save",\n              "taskId": "@{taskId}",\n              "resourceIdentifier": "@{taskFor}"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-list",children:"Config properties of LIST"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"id"}),(0,n.jsx)(t.td,{children:"Unique identifier for the application"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"First viewType should be a list. This will help in iterating over the data to display"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"baseResource"}),(0,n.jsx)(t.td,{children:"Resource to get data from"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"orientation"}),(0,n.jsx)(t.td,{children:"This is the direction you want to the widgets to flex"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"VERTICAL"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"emptyList"}),(0,n.jsx)(t.td,{children:"empty list json with a message to show in case the resource data to display is empty"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no but highly recommended"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no visits"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"registerCard"}),(0,n.jsx)(t.td,{children:"card to display widgets at"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"views"}),(0,n.jsx)(t.td,{children:"the desired widgets and their properties to be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"resources"}),(0,n.jsx)(t.td,{children:"the list resources to execute rules for"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No but should be included if you want to display data as described in the sub-title"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"emptyList()"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-nested-list",children:"Config properties of nested LIST"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"id"}),(0,n.jsx)(t.td,{children:"Unique identifier for the resource"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no but highly recommended"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"app defaults to using resourceType.Name"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"relatedResourceId"}),(0,n.jsx)(t.td,{children:"Unique identifier for the relatedResources"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no but highly recommended"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"app defaults to using resourceType.Name"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"resourceType"}),(0,n.jsx)(t.td,{children:"The resource to to get/fetch data from e.g Task or Careplan"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"conditionalFhirPathExpression"}),(0,n.jsx)(t.td,{children:"FhirPathExpression to get to use when filtering the resource defined in resourceType section"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"app defaults to using relatedResources types and fhirPathexpression"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sortConfig"}),(0,n.jsx)(t.td,{children:"Configuration used for sorting LIST widget resource"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"no"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"how-to-use-compound_text",children:"How to use COMPOUND_TEXT"}),"\n",(0,n.jsx)(t.p,{children:"Defines the configuration properties for a Compound Text view, which is a view that displays two text strings with an optional separator between them. This view can also have actions associated with each text string."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'[\n {\n   "viewType": "COMPOUND_TEXT",\n   "primaryTextBackgroundColor": "#F9CFD1",\n   "primaryText": "@{taskName}",\n   "primaryTextColor": "#000000",\n   "padding": 7,\n   "borderRadius": 6\n },\n {\n   "viewType": "COMPOUND_TEXT",\n   "primaryText": "Start date: @{taskStartDate}",\n   "primaryTextColor": "#5A5A5A",\n   "fontSize": 20\n }\n]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-compound_text",children:"Config properties of COMPOUND_TEXT"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"First viewType should be a list. This will help in iterating over the data to display"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"primaryTextBackgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the primary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"secondaryTextBackgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"primaryText"}),(0,n.jsx)(t.td,{children:"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"primaryTextColor"}),(0,n.jsx)(t.td,{children:"The color of the primary text to be displayed. This should be visible"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fontSize"}),(0,n.jsx)(t.td,{children:"The font size of the primary and secondary texts, in SP (scaled pixels)"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"16"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"borderRadius"}),(0,n.jsx)(t.td,{children:"Rounds the corners of the view's outer edge"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"weight"}),(0,n.jsx)(t.td,{children:"The weight of the view within its parent layout. This value is used to distribute the available space among multiple views."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"alignment"}),(0,n.jsx)(t.td,{children:"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment.None]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxWidth"}),(0,n.jsx)(t.td,{children:"Dertimines whether the view should fill its parent's width"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxHeight"}),(0,n.jsx)(t.td,{children:"Determines whether the view should fill its parent's height"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clickable"}),(0,n.jsx)(t.td,{children:"Determines whether the view is clickable"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"secondaryText"}),(0,n.jsx)(t.td,{children:"The primary text to be displayed in the view. If the property text is null, no primary text will be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"secondaryTextColor"}),(0,n.jsx)(t.td,{children:'The color of the secondary text, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s text color'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"separator"}),(0,n.jsx)(t.td,{children:"The separator to display between the primary and secondary texts. If this property is null, no separator will be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"primaryTextFontWeight"}),(0,n.jsx)(t.td,{children:"The font weight of the primary text"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[TextFontWeight.NORMAL]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"secondaryTextFontWeight"}),(0,n.jsx)(t.td,{children:"The font weight of the secondary text"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[TextFontWeight.NORMAL]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"primaryTextActions"}),(0,n.jsx)(t.td,{children:"The list of actions associated with the primary text. If the list is empty, no actions will be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"secondaryTextActions"}),(0,n.jsx)(t.td,{children:"The list of actions associated with the secondary text. If the list is empty, no actions will be displayed"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"overflow"}),(0,n.jsx)(t.td,{children:"Determines how the text should be truncated if it is too long to fit"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[TextOverflow.ELLIPSIS]"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"service_card-widgets",children:"SERVICE_CARD widgets"}),"\n",(0,n.jsx)(t.p,{children:"Displays Patient's details ,other related services and tasks. The details field within the SERVICE_CARD display patient's name and ID."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n "viewType": "COLUMN",\n "children": [\n   {\n     "viewType": "SERVICE_CARD",\n     "details": [\n       {\n         "viewType": "COMPOUND_TEXT",\n         "primaryText": "@{patientName}",\n         "primaryTextColor": "#000000"\n       },\n       {\n         "viewType": "COMPOUND_TEXT",\n         "primaryText": "ID: @{patientId}",\n         "fontSize": 14,\n         "primaryTextColor": "#000000"\n       }\n     ],\n     "showVerticalDivider": true,\n     "serviceButton": {\n       "visible": "@{showMemberTasks}",\n       "text": "@{taskDescription}",\n       "status": "@{serviceStatus}",\n       "smallSized": true,\n       "enabled": "false",\n       "actions": []\n     },\n     "actions": [\n       {\n         "trigger": "ON_CLICK",\n         "workflow": "LAUNCH_PROFILE",\n         "id": "otherRegistersProfile"\n       }\n     ]\n   }\n ]\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-service_card",children:"Config properties of SERVICE_CARD"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"First viewType should be a list. This will help in iterating over the data to display"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType.SERVICE_CARD]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"weight"}),(0,n.jsx)(t.td,{children:"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"The default is 0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"the default value is #FFFFFF"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"borderRadius"}),(0,n.jsx)(t.td,{children:"Rounds the corners of the view's outer edge"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"alignment"}),(0,n.jsx)(t.td,{children:"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment.None]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxWidth"}),(0,n.jsx)(t.td,{children:"Dertimines whether the view should fill its parent's width"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxHeight"}),(0,n.jsx)(t.td,{children:"Determines whether the view should fill its parent's height"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clickable"}),(0,n.jsx)(t.td,{children:"Determines whether the view is clickable"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"visible"}),(0,n.jsx)(t.td,{children:"A String value that determines whether the view should be visible"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"details"}),(0,n.jsx)(t.td,{children:"A list of CompoundTextProperties that represent the details of the service card"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"emptyList()"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"showVerticalDivider"}),(0,n.jsx)(t.td,{children:"A Boolean value that determines whether a vertical divider should be displayed in the service card view"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"servicememberIcons"}),(0,n.jsx)(t.td,{children:"A String value that represents the icons for the service members associated with the service card"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"serviceButton"}),(0,n.jsx)(t.td,{children:"A ButtonProperties object that represents a button displayed in the service card"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"services"}),(0,n.jsx)(t.td,{children:"A list of ButtonProperties that represent the services associated with the service card"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"actions"}),(0,n.jsx)(t.td,{children:"A list of ActionConfig objects that represent the actions that can be performed on the service card"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"emptyList()"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"column-widgets",children:"COLUMN widgets"}),"\n",(0,n.jsx)(t.p,{children:'The column widgets are used to create a vertical layout container that can hold multiple child views. The purpose of the "COLUMN" is to arrange child views in a vertical column, with the child views stacked on top of one another in the order in which they are added.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "COLUMN",\n  "weight": 0.7,\n  "children": [\n    {\n      "viewType": "COMPOUND_TEXT",\n      "primaryText": "VIEW ALL",\n      "primaryTextColor": "#006EB8",\n      "clickable": true,\n      "fontSize": 14,\n      "primaryTextActions": [\n        {\n          "trigger": "ON_CLICK",\n          "workflow": "LAUNCH_REGISTER",\n          "id": "pncRegister",\n          "display": "@{practitionerName} - PNC Register"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-column",children:"Config properties of COLUMN"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"First viewType should be a list. This will help in iterating over the data to display"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType.COLUMN]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"weight"}),(0,n.jsx)(t.td,{children:"A 'Float' value that represents the type of view. The weight is used to determine how much space the view should occupy in its parent container."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"The default is 0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"borderRadius"}),(0,n.jsx)(t.td,{children:"Rounds the corners of the view's outer edge"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"alignment"}),(0,n.jsx)(t.td,{children:"The alignment of the view withins its parent layout. This value is used to distribute the available space among multiple views"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment.None]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxWidth"}),(0,n.jsx)(t.td,{children:"Dertimines whether the view should fill its parent's width"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxHeight"}),(0,n.jsx)(t.td,{children:"Determines whether the view should fill its parent's height"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clickable"}),(0,n.jsx)(t.td,{children:"Determines whether the view is clickable"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"visible"}),(0,n.jsx)(t.td,{children:"A String value that determines whether the view should be visible"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"spacedBy"}),(0,n.jsx)(t.td,{children:"An integer value that represents the spacing between the children views of the column"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"8"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"wrapContent"}),(0,n.jsx)(t.td,{children:"A boolean value that represents whether the column should wrap its content or not"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"arrangement"}),(0,n.jsx)(t.td,{children:"An enum value that represents the vertical arrangement of the child views of the column"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"children"}),(0,n.jsx)(t.td,{children:"A list of ViewProperties objects that represents the child views of the column"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"emptyList()"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"image-widget",children:"IMAGE widget"}),"\n",(0,n.jsx)(t.p,{children:"Displays icons or images."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "IMAGE",\n  "tint": "#FFFFFF",\n  "size": 40,\n  "imageConfig": {\n    "type": "local",\n    "reference": "@{taskStatusIcon}"\n  },\n  "padding": 4,\n  "backgroundColor": "@{taskStatusIcon}",\n  "isCircular": true\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-image",children:"Config properties of IMAGE"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType.IMAGE]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"tint"}),(0,n.jsx)(t.td,{children:"a string specified as RGB Hex e.g '#FFFFFF'"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the Image, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"size"}),(0,n.jsx)(t.td,{children:"Size of the image in pixels"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"24"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"imageConfig"}),(0,n.jsx)(t.td,{children:"The property that points to the actual image. It can either point to a local drawable or a server side Binary file"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment.None]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Determines whether the view should fill its parent's width"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"shape"}),(0,n.jsx)(t.td,{children:"Used to clip the image into a shape e.g into a circle or rectangle"}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"row-widgets",children:"ROW widgets"}),"\n",(0,n.jsx)(t.p,{children:"The purpose of the row is to act as a container for organizing and laying out its child views horizontally."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "ROW",\n  "arrangement": "SPACE_BETWEEN",\n  "fillMaxWidth": true,\n  "children": [\n    {\n      "viewType": "COLUMN",\n      "children": [\n        {\n          "viewType": "COMPOUND_TEXT",\n          "primaryText": "Last restock",\n          "primaryTextColor": "#5A5A5A",\n          "fontSize": 18.0\n        },\n        {\n          "viewType": "COMPOUND_TEXT",\n          "primaryText": "Previous restock ",\n          "fontSize": 16.0,\n          "secondaryText": "@{lastRestockedDate}"\n        }\n      ]\n    },\n    {\n      "viewType": "COMPOUND_TEXT",\n      "primaryText": "@{lastRestockedAmount}",\n      "primaryTextColor": "#000000",\n      "fontSize": 16.0\n    }\n  ]\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-row",children:"Config properties of ROW"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"Specifies the type of view"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"weight"}),(0,n.jsx)(t.td,{children:"The weight of the row. It determines how much space this row should occupy relative to other rows in a layout that uses weights."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"The default is 0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the row.It is specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Null"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"borderRadius"}),(0,n.jsx)(t.td,{children:"The radius of the row's corners in pixels. Setting this value creates rounded corners for the row."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"alignment"}),(0,n.jsx)(t.td,{children:"Specifies the alignment of the row's content within the row."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment.NONE]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxWidth"}),(0,n.jsx)(t.td,{children:"If set to true, the row will attempt to occupy the maximum available width in its parent layout."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxHeight"}),(0,n.jsx)(t.td,{children:"If set to true, the row will attempt to occupy the maximum available height in its parent layout."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clickable"}),(0,n.jsx)(t.td,{children:'Indicates whether the row is clickable. If set to "true", the row can be interacted with and handle click events.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"visible"}),(0,n.jsx)(t.td,{children:'Specifies the visibility of the row. If set to "true", the row will be visible, otherwise, if set to "false", it will be hidden'}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"spacedBy"}),(0,n.jsx)(t.td,{children:"The spacing between the children views of the row, in pixels."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"8"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"arrangement"}),(0,n.jsx)(t.td,{children:"Specifies the arrangement of the children views within the row."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"wrapContent"}),(0,n.jsx)(t.td,{children:"If set to true, the row's width and height will adjust to wrap its content tightly."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"children"}),(0,n.jsxs)(t.td,{children:["A list of ",(0,n.jsx)(t.strong,{children:"ViewProperties"})," objects representing the children views within the row."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"emptyList()"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"view-widget",children:"VIEW Widget"}),"\n",(0,n.jsx)(t.p,{children:"Defines the hierarchical stucture of views to be rendered. It contains various properties that define its appearance and behavior."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'"views": [\n  {\n    "viewType": "COLUMN",\n    "children": [\n      {\n        "viewType": "SERVICE_CARD",\n        "details": [\n          {\n            "viewType": "COMPOUND_TEXT",\n            "primaryText": "@{patientName}",\n            "primaryTextColor": "#000000"\n          },\n          {\n            "viewType": "COMPOUND_TEXT",\n            "primaryText": "{{ id.patient.id }}",\n            "fontSize": 14,\n            "primaryTextColor": "#000000"\n          }\n        ],\n        "showVerticalDivider": false,\n        "serviceButton": {\n          "visible": true,\n          "text": "{{ anc.visit }}",\n          "status": "DUE",\n          "smallSized": true\n        },\n        "actions": [\n          {\n            "trigger": "ON_CLICK",\n            "workflow": "LAUNCH_PROFILE",\n            "id": "defaultProfile",\n            "params": [\n              {\n                "key": "patientId",\n                "value": "@{patientId}"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-view",children:"Config properties of VIEW"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsx)(t.td,{children:"Specifies the type of view. It acts as a discriminator to identify the type of view during runtime."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"weight"}),(0,n.jsx)(t.td,{children:"It defines the weight of the view, which is typically used in layout containers with weighted distribution to control the amount of space a view occupies relative to other views."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Float"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'t represents the background color of the view, specified as a color code in the format "#RRGGBB" or "#AARRGGBB". If null, it indicates a transparent background.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"String?"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"It defines the padding around the content of the view, in pixels."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Int"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"borderRadius"}),(0,n.jsx)(t.td,{children:"It specifies the radius of the view's corners in pixels. Setting this property creates rounded corners for the view."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Int"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"alignment"}),(0,n.jsx)(t.td,{children:"Specifies the alignment of the row's content within the row."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewAlignment]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxWidth"}),(0,n.jsx)(t.td,{children:"It indicates whether the view should attempt to occupy the maximum available width in its parent layout."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Boolean"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fillMaxHeight"}),(0,n.jsx)(t.td,{children:"It indicates whether the view should attempt to occupy the maximum available height in its parent layout."}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Boolean"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clickable"}),(0,n.jsx)(t.td,{children:'Indicates whether the view is clickable. If set to "true", the row can be interacted with and handle click events.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"String"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"visible"}),(0,n.jsx)(t.td,{children:'Specifies the visibility of the view. If set to "true", the row will be visible, otherwise, if set to "false", it will be hidden'}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"String"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"divider-widget",children:"Divider Widget"}),"\n",(0,n.jsx)(t.p,{children:"The Divider widget allows one to visually separate and organize different components within a graphical user interface (GUI).\nIt creates a horizontal line that acts as a visual boundary, enhancing the overall aesthetics and user experience."}),"\n",(0,n.jsx)(t.p,{children:"To use the Divider widget in the app, one has to define the JSON file as follows:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "BORDER",\n  "thickness": 0.8\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"The JSON configuration instructs the app to create a Divider widget with the following properties:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["View Type: The ",(0,n.jsx)(t.code,{children:"viewType: BORDER"})," setting specifies the  type of widget that will be rendered, and in this case, it is set to ",(0,n.jsx)(t.code,{children:'"BORDER"'})," type which renders a solid horizontal line as the divider."]}),"\n",(0,n.jsxs)(t.li,{children:["Thickness: The ",(0,n.jsx)(t.code,{children:"thickness: 0.8"})," setting determines the width of the Divider. By adjusting the thickness value, one can precisely control the Divider's visual appearance."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-divider",children:"Config properties of DIVIDER"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsxs)(t.td,{children:["The type of widget that will be rendered in this case it is the ",(0,n.jsx)(t.code,{children:"BORDER"})," view."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType.BORDER]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"thickness"}),(0,n.jsx)(t.td,{children:"The width of the Divider."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0.5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"#FFFFFF"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"visible"}),(0,n.jsx)(t.td,{children:"A string value that determines whether the view should be visible"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"spacer-widget",children:"Spacer Widget"}),"\n",(0,n.jsx)(t.p,{children:"The Spacer widget is used to create a flexible, empty space between two views. It is used to create a space between two views in a layout, and it is also used to create a space between the edge of a view and its parent layout."}),"\n",(0,n.jsx)(t.p,{children:"To use the Divider widget in the app, one has to define the JSON file as follows:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "viewType": "SPACER",\n  "height": 10\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"After defining the above JSON example a view will be rendered with the following properties:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["View Type: The ",(0,n.jsx)(t.code,{children:"viewType: SPACER"})," setting specifies that the widget that will be rendered is a spacer, which creates an empty space or gap between other UI elements."]}),"\n",(0,n.jsxs)(t.li,{children:["Height: The ",(0,n.jsx)(t.code,{children:"height: 10"})," setting determines the height of the spacer. By setting the height value to 10, the spacer will have a height of 10 density-independent pixels which scales appropriately across different screen densities, ensuring consistent visual appearance on various devices."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"config-properties-of-spacer",children:"Config properties of SPACER"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"viewType"}),(0,n.jsxs)(t.td,{children:["The type of widget that will be rendered in this case it is the ",(0,n.jsx)(t.code,{children:"SPACER"})," view."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"[ViewType.SPACER]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"height"}),(0,n.jsx)(t.td,{children:"The height of the Spacer."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"_"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backgroundColor"}),(0,n.jsx)(t.td,{children:'The background color of the view, specified as a string in the format "#RRGGBB" or "#AARRGGBB". If this property is null, the view will use its parent\'s background color.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"#FFFFFF"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"padding"}),(0,n.jsx)(t.td,{children:"Offsets the content of the view by a specific number of pixels. This should be a number"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"0"})]})]})]})]})}function x(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,t,i)=>{i.d(t,{Z:()=>d,a:()=>l});var n=i(7294);const s={},r=n.createContext(s);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[919],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),g=a,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9074:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={},o="Register configuration",l={unversionedId:"configurations/register-config",id:"configurations/register-config",title:"Register configuration",description:"Registers are the entry point to FHIRCore application. Typically this is a list used to displayed the configured FHIR resources. Clicking on a register item directs the user to the configured profile.",source:"@site/docs/configurations/register-config.mdx",sourceDirName:"configurations",slug:"/configurations/register-config",permalink:"/configurations/register-config",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/configurations/register-config.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Questionnaire configuration",permalink:"/configurations/questionnaire-config"},next:{title:"Sync configuration",permalink:"/configurations/sync-config"}},p={},s=[{value:"Config properties",id:"config-properties",level:2},{value:"Dynamic data pass between Registers and Profiles",id:"dynamic-data-pass-between-registers-and-profiles",level:2},{value:"Practitioner LAUNCH_REGISTER",id:"practitioner-launch_register",level:3},{value:"Sample JSON",id:"sample-json",level:4},{value:"Sample JSON",id:"sample-json-1",level:4},{value:"Household_config.json",id:"household_configjson",level:3},{value:"Sample JSON",id:"sample-json-2",level:4},{value:"Dynamic data pass between registers config properties",id:"dynamic-data-pass-between-registers-config-properties",level:2}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"register-configuration"},"Register configuration"),(0,a.kt)("p",null,"Registers are the entry point to FHIRCore application. Typically this is a list used to displayed the configured ",(0,a.kt)("a",{parentName:"p",href:"https://www.hl7.org/FHIR/resourcelist.html"},"FHIR resources"),". Clicking on a register item directs the user to the configured profile."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For every register in the application there should at least be one profile configuration. Similar registers can re-use the same profile configuration.")),(0,a.kt)("h2",{id:"config-properties"},"Config properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"appId"),(0,a.kt)("td",{parentName:"tr",align:null},"Unique identifier for the application"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"configType"),(0,a.kt)("td",{parentName:"tr",align:null},"Type of configuration"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"register"))))),(0,a.kt)("h2",{id:"dynamic-data-pass-between-registers-and-profiles"},"Dynamic data pass between Registers and Profiles"),(0,a.kt)("p",null,"For you to pass data between registers you can make use of ",(0,a.kt)("strong",{parentName:"p"},"action config params")," which are executed when ",(0,a.kt)("strong",{parentName:"p"},"LAUNCH_REGISTER")," is invoked.registers\nData extraction happens during rules execution and is persisted in computedValuesMap which is later using to interpolated values annotated with @value.registers\nFor example, assume the LAUNCH_REGISTER onClick function of practition_register_config takes you to household_profile screen and you would like pass send practitionerId from practition_register_config to household_profile, define it as described below"),(0,a.kt)("h3",{id:"practitioner-launch_register"},"Practitioner LAUNCH_REGISTER"),(0,a.kt)("h4",{id:"sample-json"},"Sample JSON"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Write rules to extract the data you need.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"rules":[\n     {\n      "name": "practitionerId",\n      "condition": "true",\n      "actions": [\n        "data.put(\'practitionerId\', fhirPath.extractValue(Practitioner, \'Practitioner.id.replace(\\"Practitioner/\\",\\"\\")\').split(\\"/\\").get(0))"\n      ]\n    }\n  ]\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"add your params at ",(0,a.kt)("strong",{parentName:"li"},"LAUNCH_REGISTER")," section of practition_register_config.json")),(0,a.kt)("h4",{id:"sample-json-1"},"Sample JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'     {\n                          "trigger": "ON_CLICK",\n                          "workflow": "LAUNCH_REGISTER",\n                          "id": "householdRegister",\n                          "display": "@{practitionerName} - Household Register",\n                          "params": [\n                            {\n                              "paramType": "PARAMDATA",\n                              "key": "practitionerId",\n                              "value": "@{practitionerId}"\n                            }\n                          ]\n                        }\n')),(0,a.kt)("h3",{id:"household_configjson"},"Household_config.json"),(0,a.kt)("p",null,"A dataquery config to filter by practitionerId. For more info refer to dataquery section"),(0,a.kt)("h4",{id:"sample-json-2"},"Sample JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'      {\n          "id": "householdQueryPractitionerId",\n          "filterType": "TOKEN",\n          "key": "_tag",\n          "valueType": "CODING",\n          "valueCoding": {\n            "system": "https://smartregister.org/",\n            "code": "@{practitionerId}"\n          }\n        }\n')),(0,a.kt)("h2",{id:"dynamic-data-pass-between-registers-config-properties"},"Dynamic data pass between registers config properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rules name"),(0,a.kt)("td",{parentName:"tr",align:null},"Unique identifier for the rules"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"empty string")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"condition"),(0,a.kt)("td",{parentName:"tr",align:null},"specification of execution"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"actions"),(0,a.kt)("td",{parentName:"tr",align:null},"an array of the rule logic with a fhirPathExpression"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"trigger"),(0,a.kt)("td",{parentName:"tr",align:null},"application workflow action"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no default")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"workflow"),(0,a.kt)("td",{parentName:"tr",align:null},"An application event that can trigger a workflow"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"params"),(0,a.kt)("td",{parentName:"tr",align:null},"An array of actionParameters to pass to another register"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no"),(0,a.kt)("td",{parentName:"tr",align:"center"},"emptyArray")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"paramType"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType to use e.g PREPOPULATE OR PARAMDATA"),(0,a.kt)("td",{parentName:"tr",align:"center"},"no"),(0,a.kt)("td",{parentName:"tr",align:"center"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType unique key if defined but not tag is given"),(0,a.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"application throws exception")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},"Action ParameterType corresponding key's value"),(0,a.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"application throws exception")))))}d.isMDXComponent=!0}}]);
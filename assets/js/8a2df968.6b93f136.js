"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(n),g=i,f=p["".concat(c,".").concat(g)]||p[g]||u[g]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5765:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},s="Widget configurations",a={unversionedId:"configurations/widgets/widget-config",id:"configurations/widgets/widget-config",title:"Widget configurations",description:"Configurations used to configure widgets. FHIR Core uses widgets to render views. Examples are rows, columns, cards, buttons",source:"@site/docs/configurations/widgets/widget-config.mdx",sourceDirName:"configurations/widgets",slug:"/configurations/widgets/widget-config",permalink:"/configurations/widgets/widget-config",draft:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/docs/configurations/widgets/widget-config.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Sync configuration",permalink:"/configurations/sync-config"},next:{title:"Developer Setup",permalink:"/developer-setup/"}},c={},l=[{value:"Flex Alignment widgets",id:"flex-alignment-widgets",level:2},{value:"Display other resources (List Resources) inside another list",id:"display-other-resources-list-resources-inside-another-list",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"widget-configurations"},"Widget configurations"),(0,i.kt)("p",null,"Configurations used to configure widgets. FHIR Core uses widgets to render views. Examples are rows, columns, cards, buttons"),(0,i.kt)("admonition",{type:"info"}),(0,i.kt)("h2",{id:"flex-alignment-widgets"},"Flex Alignment widgets"),(0,i.kt)("p",null,"To display items in flexRow below sample JSON config works fine. Replace ",(0,i.kt)("strong",{parentName:"p"},"COMPOUND_TEXT")," with your preferred widget component. Please note, the below json borrows from ",(0,i.kt)("strong",{parentName:"p"},"LIST")," component properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "viewType": "LIST",\n      "id": "give_your_list_an_id",\n      "baseResource": "Resource_to_use",\n      "orientation": "HORIZONTAL",\n       "emptyList": {\n        "message": ""\n                     },\n        "registerCard": {\n        "rules": [],\n         "views": [\n          {\n           "viewType": "COMPOUND_TEXT",\n            "primaryTextBackgroundColor": "#F9CFD1",\n             "primaryText": "@{carePlanTitle}",\n             "primaryTextColor": "@{carePlanTextColor}",\n             "fontSize": 13,\n             "padding": 7,\n              "borderRadius": 6\n      }\n    ]\n    }\n   }\n')),(0,i.kt)("h2",{id:"display-other-resources-list-resources-inside-another-list"},"Display other resources (List Resources) inside another list"),(0,i.kt)("p",null,"To display list resources inside a list and execute it's rules , add it's configurations as show below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'        {\n              "viewType": "LIST",\n              "id": "readyTasksList",\n              "resources": [\n                {\n                  "id": "availableTask",\n                  "relatedResourceId": "availableTasks",\n                  "resourceType": "Resource to extract data from",\n                  "conditionalFhirPathExpression": "Add your execution "\n                }\n              ],\n              "emptyList": {\n                "message": "No visit tasks available for this patient at the moment"\n              },\n              "registerCard": {\n                "rules": [\n                  {\n                    "name": "taskStatus",\n                    "condition": "true",\n                    "actions": ["Your preferred execution action"]\n                  },\n                  {\n                    "name": "taskStatusColorCode",\n                    "condition": "true",\n                    "actions": ["Your preferred execution action"]\n                  }\n                ],\n                "views": [\n                  {\n                    "viewType": "BUTTON",\n                    "smallSized": "true",\n                    "text": "",\n                    "status": "",\n                    "visible": "true",\n                    "enabled": "",\n                    "actions": [\n                      {\n                        "trigger": "ON_CLICK",\n                        "workflow": "LAUNCH_QUESTIONNAIRE",\n                        "questionnaire": {\n                          "id": "addIdHereGoodTo",\n                          "title": "@{taskDescription}",\n                          "saveButtonText": "Save",\n                          "taskId": "@{taskId}",\n                          "resourceIdentifier": "@{taskFor}"\n                        }\n                      }\n                    ]\n                  }\n                  }\n                  }\n                  ```\n\n## Config properties\n\n|Property | Description | Required | Default |\n|--|--|:--:|:--:|\nid | Unique identifier for the application | Yes | |\nviewType | First viewType should be a list. This will help in iterating over the data to display | Yes | |\nbaseResource | Resource to get data from  | Yes | |\norientation | This is the direction you want to the widgets to flex | yes | VERTICAL |\nemptyList | empty list json with a message to show in case the resource data to display is empty | no but highly recommended | no visits |\nregisterCard | card to display widgets at | Yes |  |\nviews | the desired widgets and their properties to be displayed | | |\nresources | the list resources to execute rules for | No but should be included if you want to display data as described in the sub-title|emptyList() |\n')))}u.isMDXComponent=!0}}]);